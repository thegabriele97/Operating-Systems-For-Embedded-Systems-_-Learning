
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  008002bc  008002bc  00001746  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  00001798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001037f  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003174  00000000  00000000  00012097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e07  00000000  00000000  0001520b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  00019014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000360a  00000000  00000000  00019d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000520e  00000000  00000000  0001d322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f0  00000000  00000000  00022530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_11>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_18>
      4c:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_19>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	0a 05       	cpc	r16, r10

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e6 ef       	ldi	r30, 0xF6	; 246
      ce:	f4 e1       	ldi	r31, 0x14	; 20
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 3b       	cpi	r26, 0xBC	; 188
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	24 e0       	ldi	r18, 0x04	; 4
      de:	ac eb       	ldi	r26, 0xBC	; 188
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a7 37       	cpi	r26, 0x77	; 119
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 2a 01 	call	0x254	; 0x254 <main>
     106:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_default>
	...

00000110 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     110:	2f 92       	push	r2
     112:	3f 92       	push	r3
     114:	4f 92       	push	r4
     116:	5f 92       	push	r5
     118:	6f 92       	push	r6
     11a:	7f 92       	push	r7
     11c:	8f 92       	push	r8
     11e:	9f 92       	push	r9
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	e4 2f       	mov	r30, r20
     136:	f5 2f       	mov	r31, r21
     138:	41 90       	ld	r4, Z+
     13a:	50 80       	ld	r5, Z
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	e4 2f       	mov	r30, r20
     142:	f5 2f       	mov	r31, r21
     144:	4d b6       	in	r4, 0x3d	; 61
     146:	5e b6       	in	r5, 0x3e	; 62
     148:	41 92       	st	Z+, r4
     14a:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     14c:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>

00000150 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     150:	e6 2f       	mov	r30, r22
     152:	f7 2f       	mov	r31, r23
     154:	41 90       	ld	r4, Z+
     156:	50 80       	ld	r5, Z
     158:	4d be       	out	0x3d, r4	; 61
     15a:	5e be       	out	0x3e, r5	; 62
     15c:	5f 90       	pop	r5
     15e:	4f 90       	pop	r4
     160:	e6 2f       	mov	r30, r22
     162:	f7 2f       	mov	r31, r23
     164:	41 92       	st	Z+, r4
     166:	50 82       	st	Z, r5
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	6f 90       	pop	r6
     184:	5f 90       	pop	r5
     186:	4f 90       	pop	r4
     188:	3f 90       	pop	r3
     18a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     18c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <osEE_scheduler_task_wrapper_restore>

00000190 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     190:	e6 2f       	mov	r30, r22
    mov r31, r23
     192:	f7 2f       	mov	r31, r23
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     19a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     19c:	0c 94 12 07 	jmp	0xe24	; 0xe24 <osEE_scheduler_task_wrapper_run>

000001a0 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	e4 2f       	mov	r30, r20
     1c6:	f5 2f       	mov	r31, r21
     1c8:	41 90       	ld	r4, Z+
     1ca:	50 80       	ld	r5, Z
     1cc:	4f 92       	push	r4
     1ce:	5f 92       	push	r5
     1d0:	e4 2f       	mov	r30, r20
     1d2:	f5 2f       	mov	r31, r21
     1d4:	4d b6       	in	r4, 0x3d	; 61
     1d6:	5e b6       	in	r5, 0x3e	; 62
     1d8:	41 92       	st	Z+, r4
     1da:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1dc:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000001e0 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e0:	e8 2f       	mov	r30, r24
    mov r31, r25
     1e2:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1e4:	41 91       	ld	r20, Z+
    ld  r21, z
     1e6:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1e8:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1ea:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1ec:	e6 2f       	mov	r30, r22
    mov r31, r23
     1ee:	f7 2f       	mov	r31, r23

    ijmp
     1f0:	09 94       	ijmp
	...

000001f4 <StartupHook>:
     1f4:	60 e4       	ldi	r22, 0x40	; 64
     1f6:	72 e4       	ldi	r23, 0x42	; 66
     1f8:	8f e0       	ldi	r24, 0x0F	; 15
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0c 94 64 05 	jmp	0xac8	; 0xac8 <OsEE_atmega_startTimer1>

00000200 <clock_handler>:
     200:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <isr2_armed>
     204:	81 11       	cpse	r24, r1
     206:	15 c0       	rjmp	.+42     	; 0x232 <clock_handler+0x32>
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <led_val>
     20e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <led_val+0x1>
     212:	89 2b       	or	r24, r25
     214:	09 f0       	breq	.+2      	; 0x218 <clock_handler+0x18>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	86 2f       	mov	r24, r22
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <led_val+0x1>
     220:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <led_val>
     224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     228:	0e 94 3e 03 	call	0x67c	; 0x67c <digitalWrite>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <ActivateTask>
     232:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <isr2_armed>
     236:	08 95       	ret

00000238 <setup>:
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     23e:	0e 94 02 03 	call	0x604	; 0x604 <pinMode>
     242:	26 e0       	ldi	r18, 0x06	; 6
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	52 ec       	ldi	r21, 0xC2	; 194
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	89 ed       	ldi	r24, 0xD9	; 217
     24e:	93 e0       	ldi	r25, 0x03	; 3
     250:	0c 94 46 04 	jmp	0x88c	; 0x88c <_ZN14HardwareSerial5beginEmh>

00000254 <main>:
     254:	0e 94 9e 02 	call	0x53c	; 0x53c <init>
     258:	0e 94 1c 01 	call	0x238	; 0x238 <setup>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 33 06 	call	0xc66	; 0xc66 <StartOS>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 95       	ret

00000268 <_Z12serial_printPKc>:
     268:	f8 94       	cli
     26a:	fc 01       	movw	r30, r24
     26c:	01 90       	ld	r0, Z+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <_Z12serial_printPKc+0x4>
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	af 01       	movw	r20, r30
     276:	48 1b       	sub	r20, r24
     278:	59 0b       	sbc	r21, r25
     27a:	bc 01       	movw	r22, r24
     27c:	89 ed       	ldi	r24, 0xD9	; 217
     27e:	93 e0       	ldi	r25, 0x03	; 3
     280:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN5Print5writeEPKhj>
     284:	89 ea       	ldi	r24, 0xA9	; 169
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	89 2b       	or	r24, r25
     28a:	11 f0       	breq	.+4      	; 0x290 <_Z12serial_printPKc+0x28>
     28c:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     290:	78 94       	sei
     292:	08 95       	ret

00000294 <idle_hook>:
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <idle_hook+0xa>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	8d b7       	in	r24, 0x3d	; 61
     2a4:	9e b7       	in	r25, 0x3e	; 62
     2a6:	9a 83       	std	Y+2, r25	; 0x02
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     2ae:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     2b2:	89 2b       	or	r24, r25
     2b4:	a9 f4       	brne	.+42     	; 0x2e0 <idle_hook+0x4c>
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0x1>
     2be:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
     2c2:	f8 94       	cli
     2c4:	89 ea       	ldi	r24, 0xA9	; 169
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	89 2b       	or	r24, r25
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <idle_hook+0x3c>
     2cc:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     2d0:	78 94       	sei
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret
     2e0:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
     2e4:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	9a 81       	ldd	r25, Y+2	; 0x02
     2ec:	28 17       	cp	r18, r24
     2ee:	39 07       	cpc	r19, r25
     2f0:	41 f3       	breq	.-48     	; 0x2c2 <idle_hook+0x2e>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f8:	0e 94 3e 03 	call	0x67c	; 0x67c <digitalWrite>
     2fc:	f8 94       	cli
     2fe:	88 e7       	ldi	r24, 0x78	; 120
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     306:	09 ea       	ldi	r16, 0xA9	; 169
     308:	13 e0       	ldi	r17, 0x03	; 3
     30a:	01 15       	cp	r16, r1
     30c:	11 05       	cpc	r17, r1
     30e:	e9 f3       	breq	.-6      	; 0x30a <idle_hook+0x76>
     310:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     314:	fa cf       	rjmp	.-12     	; 0x30a <idle_hook+0x76>

00000316 <FuncTask1>:
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	88 eb       	ldi	r24, 0xB8	; 184
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     322:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task1_fired>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <task1_fired>
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <isr2_armed>
     332:	8d b7       	in	r24, 0x3d	; 61
     334:	9e b7       	in	r25, 0x3e	; 62
     336:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <task1_sp>
     33a:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <task1_sp+0x1>
     33e:	23 2b       	or	r18, r19
     340:	69 f5       	brne	.+90     	; 0x39c <FuncTask1+0x86>
     342:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <task1_sp+0x1>
     346:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <task1_sp>
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	0e 94 d4 06 	call	0xda8	; 0xda8 <ActivateTask>
     350:	8d ec       	ldi	r24, 0xCD	; 205
     352:	93 e0       	ldi	r25, 0x03	; 3
     354:	0e 94 0e 06 	call	0xc1c	; 0xc1c <PostSem>
     358:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <isr2_armed>
     35c:	81 11       	cpse	r24, r1
     35e:	fc cf       	rjmp	.-8      	; 0x358 <FuncTask1+0x42>
     360:	80 eb       	ldi	r24, 0xB0	; 176
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     368:	8d b7       	in	r24, 0x3d	; 61
     36a:	9e b7       	in	r25, 0x3e	; 62
     36c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <task1_sp>
     370:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <task1_sp+0x1>
     374:	28 17       	cp	r18, r24
     376:	39 07       	cpc	r19, r25
     378:	49 f1       	breq	.+82     	; 0x3cc <FuncTask1+0xb6>
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     380:	0e 94 3e 03 	call	0x67c	; 0x67c <digitalWrite>
     384:	f8 94       	cli
     386:	80 ec       	ldi	r24, 0xC0	; 192
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     38e:	c9 ea       	ldi	r28, 0xA9	; 169
     390:	d3 e0       	ldi	r29, 0x03	; 3
     392:	20 97       	sbiw	r28, 0x00	; 0
     394:	f1 f3       	breq	.-4      	; 0x392 <FuncTask1+0x7c>
     396:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     39a:	fb cf       	rjmp	.-10     	; 0x392 <FuncTask1+0x7c>
     39c:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <task1_sp>
     3a0:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <task1_sp+0x1>
     3a4:	28 17       	cp	r18, r24
     3a6:	39 07       	cpc	r19, r25
     3a8:	81 f2       	breq	.-96     	; 0x34a <FuncTask1+0x34>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3b0:	0e 94 3e 03 	call	0x67c	; 0x67c <digitalWrite>
     3b4:	f8 94       	cli
     3b6:	84 e9       	ldi	r24, 0x94	; 148
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     3be:	c9 ea       	ldi	r28, 0xA9	; 169
     3c0:	d3 e0       	ldi	r29, 0x03	; 3
     3c2:	20 97       	sbiw	r28, 0x00	; 0
     3c4:	f1 f3       	breq	.-4      	; 0x3c2 <FuncTask1+0xac>
     3c6:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     3ca:	fb cf       	rjmp	.-10     	; 0x3c2 <FuncTask1+0xac>
     3cc:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task1_ended>
     3d0:	8f 5f       	subi	r24, 0xFF	; 255
     3d2:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <task1_ended>
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <FuncTask2>:
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	8c ed       	ldi	r24, 0xDC	; 220
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     3e8:	8d b7       	in	r24, 0x3d	; 61
     3ea:	9e b7       	in	r25, 0x3e	; 62
     3ec:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <task2_sp>
     3f0:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <task2_sp+0x1>
     3f4:	23 2b       	or	r18, r19
     3f6:	c1 f4       	brne	.+48     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3f8:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <task2_sp+0x1>
     3fc:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <task2_sp>
     400:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task2_fired>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <task2_fired>
     40a:	8d ec       	ldi	r24, 0xCD	; 205
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 c2 05 	call	0xb84	; 0xb84 <WaitSem>
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	0e 94 d4 06 	call	0xda8	; 0xda8 <ActivateTask>
     418:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task2_ended>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <task2_ended>
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret
     428:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <task2_sp>
     42c:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <task2_sp+0x1>
     430:	28 17       	cp	r18, r24
     432:	39 07       	cpc	r19, r25
     434:	29 f3       	breq	.-54     	; 0x400 <__LOCK_REGION_LENGTH__>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     43c:	0e 94 3e 03 	call	0x67c	; 0x67c <digitalWrite>
     440:	f8 94       	cli
     442:	84 ee       	ldi	r24, 0xE4	; 228
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     44a:	c9 ea       	ldi	r28, 0xA9	; 169
     44c:	d3 e0       	ldi	r29, 0x03	; 3
     44e:	20 97       	sbiw	r28, 0x00	; 0
     450:	f1 f3       	breq	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     452:	0e 94 a9 03 	call	0x752	; 0x752 <_Z14serialEventRunv>
     456:	fb cf       	rjmp	.-10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

00000458 <FuncTask3>:
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     460:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task3_fired>
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <task3_fired>
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	0e 94 d4 06 	call	0xda8	; 0xda8 <ActivateTask>
     470:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task3_ended>
     474:	8f 5f       	subi	r24, 0xFF	; 255
     476:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <task3_ended>
     47a:	08 95       	ret

0000047c <FuncTask4>:
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     484:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <task4_fired>
     488:	8f 5f       	subi	r24, 0xFF	; 255
     48a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <task4_fired>
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <ActivateTask>

00000494 <FuncTask5>:
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 34 01 	call	0x268	; 0x268 <_Z12serial_printPKc>
     49c:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <task5_fired>
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <task5_fired>
     4a6:	08 95       	ret

000004a8 <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 93       	push	r18
     4b4:	3f 93       	push	r19
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <timer0_millis>
     4c2:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <timer0_millis+0x1>
     4c6:	a0 91 d3 03 	lds	r26, 0x03D3	; 0x8003d3 <timer0_millis+0x2>
     4ca:	b0 91 d4 03 	lds	r27, 0x03D4	; 0x8003d4 <timer0_millis+0x3>
     4ce:	30 91 d0 03 	lds	r19, 0x03D0	; 0x8003d0 <timer0_fract>
     4d2:	23 e0       	ldi	r18, 0x03	; 3
     4d4:	23 0f       	add	r18, r19
     4d6:	2d 37       	cpi	r18, 0x7D	; 125
     4d8:	58 f5       	brcc	.+86     	; 0x530 <__vector_16+0x88>
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	a1 1d       	adc	r26, r1
     4de:	b1 1d       	adc	r27, r1
     4e0:	20 93 d0 03 	sts	0x03D0, r18	; 0x8003d0 <timer0_fract>
     4e4:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <timer0_millis>
     4e8:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <timer0_millis+0x1>
     4ec:	a0 93 d3 03 	sts	0x03D3, r26	; 0x8003d3 <timer0_millis+0x2>
     4f0:	b0 93 d4 03 	sts	0x03D4, r27	; 0x8003d4 <timer0_millis+0x3>
     4f4:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <timer0_overflow_count>
     4f8:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <timer0_overflow_count+0x1>
     4fc:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <timer0_overflow_count+0x2>
     500:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <timer0_overflow_count+0x3>
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	a1 1d       	adc	r26, r1
     508:	b1 1d       	adc	r27, r1
     50a:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <timer0_overflow_count>
     50e:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <timer0_overflow_count+0x1>
     512:	a0 93 d7 03 	sts	0x03D7, r26	; 0x8003d7 <timer0_overflow_count+0x2>
     516:	b0 93 d8 03 	sts	0x03D8, r27	; 0x8003d8 <timer0_overflow_count+0x3>
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti
     530:	26 e8       	ldi	r18, 0x86	; 134
     532:	23 0f       	add	r18, r19
     534:	02 96       	adiw	r24, 0x02	; 2
     536:	a1 1d       	adc	r26, r1
     538:	b1 1d       	adc	r27, r1
     53a:	d2 cf       	rjmp	.-92     	; 0x4e0 <__vector_16+0x38>

0000053c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     53c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     53e:	84 b5       	in	r24, 0x24	; 36
     540:	82 60       	ori	r24, 0x02	; 2
     542:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     544:	84 b5       	in	r24, 0x24	; 36
     546:	81 60       	ori	r24, 0x01	; 1
     548:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     54a:	85 b5       	in	r24, 0x25	; 37
     54c:	82 60       	ori	r24, 0x02	; 2
     54e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     550:	85 b5       	in	r24, 0x25	; 37
     552:	81 60       	ori	r24, 0x01	; 1
     554:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     556:	ee e6       	ldi	r30, 0x6E	; 110
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	81 60       	ori	r24, 0x01	; 1
     55e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     560:	e1 e8       	ldi	r30, 0x81	; 129
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     566:	80 81       	ld	r24, Z
     568:	82 60       	ori	r24, 0x02	; 2
     56a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     56c:	80 81       	ld	r24, Z
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     572:	e0 e8       	ldi	r30, 0x80	; 128
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	81 60       	ori	r24, 0x01	; 1
     57a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     57c:	e1 eb       	ldi	r30, 0xB1	; 177
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	84 60       	ori	r24, 0x04	; 4
     584:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     586:	e0 eb       	ldi	r30, 0xB0	; 176
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     590:	ea e7       	ldi	r30, 0x7A	; 122
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	84 60       	ori	r24, 0x04	; 4
     598:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     59a:	80 81       	ld	r24, Z
     59c:	82 60       	ori	r24, 0x02	; 2
     59e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     5a0:	80 81       	ld	r24, Z
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     5a6:	80 81       	ld	r24, Z
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     5ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#endif
}
     5b0:	08 95       	ret

000005b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     5b2:	83 30       	cpi	r24, 0x03	; 3
     5b4:	81 f0       	breq	.+32     	; 0x5d6 <turnOffPWM+0x24>
     5b6:	28 f4       	brcc	.+10     	; 0x5c2 <turnOffPWM+0x10>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	99 f0       	breq	.+38     	; 0x5e2 <turnOffPWM+0x30>
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	a9 f0       	breq	.+42     	; 0x5ea <turnOffPWM+0x38>
     5c0:	08 95       	ret
     5c2:	87 30       	cpi	r24, 0x07	; 7
     5c4:	a9 f0       	breq	.+42     	; 0x5f0 <turnOffPWM+0x3e>
     5c6:	88 30       	cpi	r24, 0x08	; 8
     5c8:	c9 f0       	breq	.+50     	; 0x5fc <turnOffPWM+0x4a>
     5ca:	84 30       	cpi	r24, 0x04	; 4
     5cc:	b1 f4       	brne	.+44     	; 0x5fa <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     5ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     5d2:	8f 7d       	andi	r24, 0xDF	; 223
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     5d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     5da:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     5dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     5e0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     5e2:	84 b5       	in	r24, 0x24	; 36
     5e4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     5e6:	84 bd       	out	0x24, r24	; 36
     5e8:	08 95       	ret
     5ea:	84 b5       	in	r24, 0x24	; 36
     5ec:	8f 7d       	andi	r24, 0xDF	; 223
     5ee:	fb cf       	rjmp	.-10     	; 0x5e6 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     5f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     5f4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     5f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     5fa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     5fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     600:	8f 7d       	andi	r24, 0xDF	; 223
     602:	f9 cf       	rjmp	.-14     	; 0x5f6 <turnOffPWM+0x44>

00000604 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	e4 58       	subi	r30, 0x84	; 132
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     612:	80 57       	subi	r24, 0x70	; 112
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	fc 01       	movw	r30, r24
     618:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     61a:	88 23       	and	r24, r24
     61c:	c9 f0       	breq	.+50     	; 0x650 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	fc 01       	movw	r30, r24
     626:	e2 55       	subi	r30, 0x52	; 82
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	a5 91       	lpm	r26, Z+
     62c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     62e:	fc 01       	movw	r30, r24
     630:	ec 55       	subi	r30, 0x5C	; 92
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	c5 91       	lpm	r28, Z+
     636:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     638:	61 11       	cpse	r22, r1
     63a:	0d c0       	rjmp	.+26     	; 0x656 <pinMode+0x52>
		uint8_t oldSREG = SREG;
     63c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     63e:	f8 94       	cli
		*reg &= ~bit;
     640:	8c 91       	ld	r24, X
     642:	20 95       	com	r18
     644:	82 23       	and	r24, r18
     646:	8c 93       	st	X, r24
		*out &= ~bit;
     648:	88 81       	ld	r24, Y
     64a:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     64c:	28 83       	st	Y, r18
		SREG = oldSREG;
     64e:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     656:	62 30       	cpi	r22, 0x02	; 2
     658:	51 f4       	brne	.+20     	; 0x66e <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     65a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     65c:	f8 94       	cli
		*reg &= ~bit;
     65e:	3c 91       	ld	r19, X
     660:	82 2f       	mov	r24, r18
     662:	80 95       	com	r24
     664:	83 23       	and	r24, r19
     666:	8c 93       	st	X, r24
		*out |= bit;
     668:	e8 81       	ld	r30, Y
     66a:	2e 2b       	or	r18, r30
     66c:	ef cf       	rjmp	.-34     	; 0x64c <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     66e:	8f b7       	in	r24, 0x3f	; 63
                cli();
     670:	f8 94       	cli
		*reg |= bit;
     672:	ec 91       	ld	r30, X
     674:	2e 2b       	or	r18, r30
     676:	2c 93       	st	X, r18
		SREG = oldSREG;
     678:	8f bf       	out	0x3f, r24	; 63
     67a:	ea cf       	rjmp	.-44     	; 0x650 <pinMode+0x4c>

0000067c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	e8 59       	subi	r30, 0x98	; 152
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     68e:	f9 01       	movw	r30, r18
     690:	e4 58       	subi	r30, 0x84	; 132
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     696:	f9 01       	movw	r30, r18
     698:	e0 57       	subi	r30, 0x70	; 112
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     69e:	cc 23       	and	r28, r28
     6a0:	a9 f0       	breq	.+42     	; 0x6cc <digitalWrite+0x50>
     6a2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6a4:	81 11       	cpse	r24, r1
     6a6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <turnOffPWM>

	out = portOutputRegister(port);
     6aa:	ec 2f       	mov	r30, r28
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ec 55       	subi	r30, 0x5C	; 92
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
     6b6:	a5 91       	lpm	r26, Z+
     6b8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     6ba:	8f b7       	in	r24, 0x3f	; 63
	cli();
     6bc:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     6be:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     6c0:	11 11       	cpse	r17, r1
     6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <digitalWrite+0x58>
		*out &= ~bit;
     6c4:	d0 95       	com	r29
     6c6:	de 23       	and	r29, r30
	} else {
		*out |= bit;
     6c8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     6ca:	8f bf       	out	0x3f, r24	; 63
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     6d4:	de 2b       	or	r29, r30
     6d6:	f8 cf       	rjmp	.-16     	; 0x6c8 <digitalWrite+0x4c>

000006d8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     6d8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     6da:	91 8d       	ldd	r25, Z+25	; 0x19
     6dc:	22 8d       	ldd	r18, Z+26	; 0x1a
     6de:	89 2f       	mov	r24, r25
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	80 5c       	subi	r24, 0xC0	; 192
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	82 1b       	sub	r24, r18
     6e8:	91 09       	sbc	r25, r1
}
     6ea:	8f 73       	andi	r24, 0x3F	; 63
     6ec:	99 27       	eor	r25, r25
     6ee:	08 95       	ret

000006f0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     6f0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     6f2:	91 8d       	ldd	r25, Z+25	; 0x19
     6f4:	82 8d       	ldd	r24, Z+26	; 0x1a
     6f6:	98 17       	cp	r25, r24
     6f8:	31 f0       	breq	.+12     	; 0x706 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     6fa:	82 8d       	ldd	r24, Z+26	; 0x1a
     6fc:	e8 0f       	add	r30, r24
     6fe:	f1 1d       	adc	r31, r1
     700:	85 8d       	ldd	r24, Z+29	; 0x1d
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     70a:	08 95       	ret

0000070c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     70c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     70e:	91 8d       	ldd	r25, Z+25	; 0x19
     710:	82 8d       	ldd	r24, Z+26	; 0x1a
     712:	98 17       	cp	r25, r24
     714:	61 f0       	breq	.+24     	; 0x72e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     716:	a2 8d       	ldd	r26, Z+26	; 0x1a
     718:	ae 0f       	add	r26, r30
     71a:	bf 2f       	mov	r27, r31
     71c:	b1 1d       	adc	r27, r1
     71e:	5d 96       	adiw	r26, 0x1d	; 29
     720:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     722:	92 8d       	ldd	r25, Z+26	; 0x1a
     724:	9f 5f       	subi	r25, 0xFF	; 255
     726:	9f 73       	andi	r25, 0x3F	; 63
     728:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     732:	08 95       	ret

00000734 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     734:	fc 01       	movw	r30, r24
     736:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     738:	44 8d       	ldd	r20, Z+28	; 0x1c
     73a:	25 2f       	mov	r18, r21
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	84 2f       	mov	r24, r20
     740:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     742:	82 1b       	sub	r24, r18
     744:	93 0b       	sbc	r25, r19
     746:	54 17       	cp	r21, r20
     748:	10 f0       	brcs	.+4      	; 0x74e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     74a:	cf 96       	adiw	r24, 0x3f	; 63
     74c:	08 95       	ret
  return tail - head - 1;
     74e:	01 97       	sbiw	r24, 0x01	; 1
}
     750:	08 95       	ret

00000752 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	95 e0       	ldi	r25, 0x05	; 5
     756:	89 2b       	or	r24, r25
     758:	49 f0       	breq	.+18     	; 0x76c <_Z14serialEventRunv+0x1a>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	89 2b       	or	r24, r25
     760:	29 f0       	breq	.+10     	; 0x76c <_Z14serialEventRunv+0x1a>
     762:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z17Serial0_availablev>
     766:	81 11       	cpse	r24, r1
     768:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     76c:	08 95       	ret

0000076e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     76e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     770:	a4 8d       	ldd	r26, Z+28	; 0x1c
     772:	a8 0f       	add	r26, r24
     774:	b9 2f       	mov	r27, r25
     776:	b1 1d       	adc	r27, r1
     778:	a3 5a       	subi	r26, 0xA3	; 163
     77a:	bf 4f       	sbci	r27, 0xFF	; 255
     77c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     77e:	84 8d       	ldd	r24, Z+28	; 0x1c
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	8f 73       	andi	r24, 0x3F	; 63
     786:	99 27       	eor	r25, r25
     788:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     78a:	a6 89       	ldd	r26, Z+22	; 0x16
     78c:	b7 89       	ldd	r27, Z+23	; 0x17
     78e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     790:	a0 89       	ldd	r26, Z+16	; 0x10
     792:	b1 89       	ldd	r27, Z+17	; 0x11
     794:	8c 91       	ld	r24, X
     796:	83 70       	andi	r24, 0x03	; 3
     798:	80 64       	ori	r24, 0x40	; 64
     79a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     79c:	93 8d       	ldd	r25, Z+27	; 0x1b
     79e:	84 8d       	ldd	r24, Z+28	; 0x1c
     7a0:	98 13       	cpse	r25, r24
     7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7a4:	02 88       	ldd	r0, Z+18	; 0x12
     7a6:	f3 89       	ldd	r31, Z+19	; 0x13
     7a8:	e0 2d       	mov	r30, r0
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	80 83       	st	Z, r24
  }
}
     7b0:	08 95       	ret

000007b2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7b8:	88 8d       	ldd	r24, Y+24	; 0x18
     7ba:	88 23       	and	r24, r24
     7bc:	b9 f0       	breq	.+46     	; 0x7ec <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7be:	aa 89       	ldd	r26, Y+18	; 0x12
     7c0:	bb 89       	ldd	r27, Y+19	; 0x13
     7c2:	e8 89       	ldd	r30, Y+16	; 0x10
     7c4:	f9 89       	ldd	r31, Y+17	; 0x11
     7c6:	8c 91       	ld	r24, X
     7c8:	85 fd       	sbrc	r24, 5
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <_ZN14HardwareSerial5flushEv+0x20>
     7cc:	80 81       	ld	r24, Z
     7ce:	86 fd       	sbrc	r24, 6
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	07 fc       	sbrc	r0, 7
     7d6:	f7 cf       	rjmp	.-18     	; 0x7c6 <_ZN14HardwareSerial5flushEv+0x14>
     7d8:	8c 91       	ld	r24, X
     7da:	85 ff       	sbrs	r24, 5
     7dc:	f2 cf       	rjmp	.-28     	; 0x7c2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     7de:	80 81       	ld	r24, Z
     7e0:	85 ff       	sbrs	r24, 5
     7e2:	ed cf       	rjmp	.-38     	; 0x7be <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     7e4:	ce 01       	movw	r24, r28
     7e6:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7ea:	e9 cf       	rjmp	.-46     	; 0x7be <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ec 01       	movw	r28, r24
  _written = true;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     804:	9b 8d       	ldd	r25, Y+27	; 0x1b
     806:	8c 8d       	ldd	r24, Y+28	; 0x1c
     808:	98 13       	cpse	r25, r24
     80a:	1a c0       	rjmp	.+52     	; 0x840 <_ZN14HardwareSerial5writeEh+0x4e>
     80c:	e8 89       	ldd	r30, Y+16	; 0x10
     80e:	f9 89       	ldd	r31, Y+17	; 0x11
     810:	80 81       	ld	r24, Z
     812:	85 ff       	sbrs	r24, 5
     814:	15 c0       	rjmp	.+42     	; 0x840 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     816:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     818:	f8 94       	cli
      *_udr = c;
     81a:	ee 89       	ldd	r30, Y+22	; 0x16
     81c:	ff 89       	ldd	r31, Y+23	; 0x17
     81e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     820:	e8 89       	ldd	r30, Y+16	; 0x10
     822:	f9 89       	ldd	r31, Y+17	; 0x11
     824:	80 81       	ld	r24, Z
     826:	83 70       	andi	r24, 0x03	; 3
     828:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     82a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     82c:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	08 95       	ret
     840:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     842:	0b 8d       	ldd	r16, Y+27	; 0x1b
     844:	10 e0       	ldi	r17, 0x00	; 0
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	0f 73       	andi	r16, 0x3F	; 63
     84c:	11 27       	eor	r17, r17
     84e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     850:	8c 8d       	ldd	r24, Y+28	; 0x1c
     852:	8e 11       	cpse	r24, r14
     854:	0c c0       	rjmp	.+24     	; 0x86e <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	07 fc       	sbrc	r0, 7
     85a:	fa cf       	rjmp	.-12     	; 0x850 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     85c:	e8 89       	ldd	r30, Y+16	; 0x10
     85e:	f9 89       	ldd	r31, Y+17	; 0x11
     860:	80 81       	ld	r24, Z
     862:	85 ff       	sbrs	r24, 5
     864:	f5 cf       	rjmp	.-22     	; 0x850 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     866:	ce 01       	movw	r24, r28
     868:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     86c:	f1 cf       	rjmp	.-30     	; 0x850 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     86e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     870:	ec 0f       	add	r30, r28
     872:	fd 2f       	mov	r31, r29
     874:	f1 1d       	adc	r31, r1
     876:	e3 5a       	subi	r30, 0xA3	; 163
     878:	ff 4f       	sbci	r31, 0xFF	; 255
     87a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     87c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     87e:	f8 94       	cli
    _tx_buffer_head = i;
     880:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     882:	ea 89       	ldd	r30, Y+18	; 0x12
     884:	fb 89       	ldd	r31, Y+19	; 0x13
     886:	80 81       	ld	r24, Z
     888:	80 62       	ori	r24, 0x20	; 32
     88a:	cf cf       	rjmp	.-98     	; 0x82a <_ZN14HardwareSerial5writeEh+0x38>

0000088c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	ec 01       	movw	r28, r24
     89c:	6a 01       	movw	r12, r20
     89e:	7b 01       	movw	r14, r22
     8a0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     8a2:	e8 89       	ldd	r30, Y+16	; 0x10
     8a4:	f9 89       	ldd	r31, Y+17	; 0x11
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8aa:	c1 14       	cp	r12, r1
     8ac:	81 ee       	ldi	r24, 0xE1	; 225
     8ae:	d8 06       	cpc	r13, r24
     8b0:	e1 04       	cpc	r14, r1
     8b2:	f1 04       	cpc	r15, r1
     8b4:	a1 f0       	breq	.+40     	; 0x8de <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	79 e0       	ldi	r23, 0x09	; 9
     8ba:	8d e3       	ldi	r24, 0x3D	; 61
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     8c6:	21 50       	subi	r18, 0x01	; 1
     8c8:	31 09       	sbc	r19, r1
     8ca:	41 09       	sbc	r20, r1
     8cc:	51 09       	sbc	r21, r1
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     8d6:	21 15       	cp	r18, r1
     8d8:	80 e1       	ldi	r24, 0x10	; 16
     8da:	38 07       	cpc	r19, r24
     8dc:	98 f0       	brcs	.+38     	; 0x904 <__stack+0x5>
  {
    *_ucsra = 0;
     8de:	e8 89       	ldd	r30, Y+16	; 0x10
     8e0:	f9 89       	ldd	r31, Y+17	; 0x11
     8e2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     8e4:	60 e8       	ldi	r22, 0x80	; 128
     8e6:	74 e8       	ldi	r23, 0x84	; 132
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a7 01       	movw	r20, r14
     8ee:	96 01       	movw	r18, r12
     8f0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	31 09       	sbc	r19, r1
     8f8:	41 09       	sbc	r20, r1
     8fa:	51 09       	sbc	r21, r1
     8fc:	56 95       	lsr	r21
     8fe:	47 95       	ror	r20
     900:	37 95       	ror	r19
     902:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     904:	ec 85       	ldd	r30, Y+12	; 0x0c
     906:	fd 85       	ldd	r31, Y+13	; 0x0d
     908:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     90a:	ee 85       	ldd	r30, Y+14	; 0x0e
     90c:	ff 85       	ldd	r31, Y+15	; 0x0f
     90e:	20 83       	st	Z, r18

  _written = false;
     910:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     912:	ec 89       	ldd	r30, Y+20	; 0x14
     914:	fd 89       	ldd	r31, Y+21	; 0x15
     916:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     918:	ea 89       	ldd	r30, Y+18	; 0x12
     91a:	fb 89       	ldd	r31, Y+19	; 0x13
     91c:	80 81       	ld	r24, Z
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     922:	ea 89       	ldd	r30, Y+18	; 0x12
     924:	fb 89       	ldd	r31, Y+19	; 0x13
     926:	80 81       	ld	r24, Z
     928:	88 60       	ori	r24, 0x08	; 8
     92a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     92c:	ea 89       	ldd	r30, Y+18	; 0x12
     92e:	fb 89       	ldd	r31, Y+19	; 0x13
     930:	80 81       	ld	r24, Z
     932:	80 68       	ori	r24, 0x80	; 128
     934:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     936:	ea 89       	ldd	r30, Y+18	; 0x12
     938:	fb 89       	ldd	r31, Y+19	; 0x13
     93a:	80 81       	ld	r24, Z
     93c:	8f 7d       	andi	r24, 0xDF	; 223
     93e:	80 83       	st	Z, r24
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	2f 93       	push	r18
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     964:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <Serial+0x10>
     968:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <Serial+0x11>
     96c:	80 81       	ld	r24, Z
     96e:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <Serial+0x16>
     972:	f0 91 f0 03 	lds	r31, 0x03F0	; 0x8003f0 <Serial+0x17>
     976:	82 fd       	sbrc	r24, 2
     978:	1b c0       	rjmp	.+54     	; 0x9b0 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     97a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     97c:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <Serial+0x19>
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     984:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <Serial+0x1a>
     988:	82 17       	cp	r24, r18
     98a:	41 f0       	breq	.+16     	; 0x99c <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     98c:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <Serial+0x19>
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	e7 52       	subi	r30, 0x27	; 39
     994:	fc 4f       	sbci	r31, 0xFC	; 252
     996:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     998:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <Serial+0x19>
    Serial._rx_complete_irq();
  }
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9b0:	80 81       	ld	r24, Z
     9b2:	f4 cf       	rjmp	.-24     	; 0x99c <__vector_18+0x4c>

000009b4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9d6:	89 ed       	ldi	r24, 0xD9	; 217
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a00:	89 ed       	ldi	r24, 0xD9	; 217
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN14HardwareSerial9availableEv>
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	89 2b       	or	r24, r25
     a0c:	09 f4       	brne	.+2      	; 0xa10 <_Z17Serial0_availablev+0x10>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
}
     a10:	82 2f       	mov	r24, r18
     a12:	08 95       	ret

00000a14 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a14:	e9 ed       	ldi	r30, 0xD9	; 217
     a16:	f3 e0       	ldi	r31, 0x03	; 3
     a18:	13 82       	std	Z+3, r1	; 0x03
     a1a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a1c:	88 ee       	ldi	r24, 0xE8	; 232
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	84 83       	std	Z+4, r24	; 0x04
     a26:	95 83       	std	Z+5, r25	; 0x05
     a28:	a6 83       	std	Z+6, r26	; 0x06
     a2a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a2c:	8e ea       	ldi	r24, 0xAE	; 174
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
     a34:	85 ec       	ldi	r24, 0xC5	; 197
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	95 87       	std	Z+13, r25	; 0x0d
     a3a:	84 87       	std	Z+12, r24	; 0x0c
     a3c:	84 ec       	ldi	r24, 0xC4	; 196
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	97 87       	std	Z+15, r25	; 0x0f
     a42:	86 87       	std	Z+14, r24	; 0x0e
     a44:	80 ec       	ldi	r24, 0xC0	; 192
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	91 8b       	std	Z+17, r25	; 0x11
     a4a:	80 8b       	std	Z+16, r24	; 0x10
     a4c:	81 ec       	ldi	r24, 0xC1	; 193
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	93 8b       	std	Z+19, r25	; 0x13
     a52:	82 8b       	std	Z+18, r24	; 0x12
     a54:	82 ec       	ldi	r24, 0xC2	; 194
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	95 8b       	std	Z+21, r25	; 0x15
     a5a:	84 8b       	std	Z+20, r24	; 0x14
     a5c:	86 ec       	ldi	r24, 0xC6	; 198
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	97 8b       	std	Z+23, r25	; 0x17
     a62:	86 8b       	std	Z+22, r24	; 0x16
     a64:	11 8e       	std	Z+25, r1	; 0x19
     a66:	12 8e       	std	Z+26, r1	; 0x1a
     a68:	13 8e       	std	Z+27, r1	; 0x1b
     a6a:	14 8e       	std	Z+28, r1	; 0x1c
     a6c:	08 95       	ret

00000a6e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	6c 01       	movw	r12, r24
     a84:	7b 01       	movw	r14, r22
     a86:	8b 01       	movw	r16, r22
     a88:	04 0f       	add	r16, r20
     a8a:	15 1f       	adc	r17, r21
     a8c:	eb 01       	movw	r28, r22
     a8e:	5e 01       	movw	r10, r28
     a90:	ae 18       	sub	r10, r14
     a92:	bf 08       	sbc	r11, r15
  size_t n = 0;
  while (size--) {
     a94:	c0 17       	cp	r28, r16
     a96:	d1 07       	cpc	r29, r17
     a98:	59 f0       	breq	.+22     	; 0xab0 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
     a9a:	69 91       	ld	r22, Y+
     a9c:	d6 01       	movw	r26, r12
     a9e:	ed 91       	ld	r30, X+
     aa0:	fc 91       	ld	r31, X
     aa2:	01 90       	ld	r0, Z+
     aa4:	f0 81       	ld	r31, Z
     aa6:	e0 2d       	mov	r30, r0
     aa8:	c6 01       	movw	r24, r12
     aaa:	09 95       	icall
     aac:	89 2b       	or	r24, r25
     aae:	79 f7       	brne	.-34     	; 0xa8e <_ZN5Print5writeEPKhj+0x20>
    else break;
  }
  return n;
}
     ab0:	c5 01       	movw	r24, r10
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	08 95       	ret

00000ac8 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
     ac8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR1A = 0;
     acc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1C = 0;
     ad0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  TCNT1  = 0;
     ad4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ad8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
     adc:	61 15       	cp	r22, r1
     ade:	20 e1       	ldi	r18, 0x10	; 16
     ae0:	72 07       	cpc	r23, r18
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	a0 f4       	brcc	.+40     	; 0xb10 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
     ae8:	e4 e0       	ldi	r30, 0x04	; 4
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	ea 95       	dec	r30
     af0:	e1 f7       	brne	.-8      	; 0xaea <OsEE_atmega_startTimer1+0x22>
     af2:	61 50       	subi	r22, 0x01	; 1
     af4:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
     af6:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
     afc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
     b00:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b04:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
     b08:	88 60       	ori	r24, 0x08	; 8
     b0a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}	/* startTimer1() */
     b0e:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
     b10:	61 15       	cp	r22, r1
     b12:	20 e8       	ldi	r18, 0x80	; 128
     b14:	72 07       	cpc	r23, r18
     b16:	81 05       	cpc	r24, r1
     b18:	91 05       	cpc	r25, r1
     b1a:	30 f4       	brcc	.+12     	; 0xb28 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	61 50       	subi	r22, 0x01	; 1
     b22:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	e8 cf       	rjmp	.-48     	; 0xaf8 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
     b28:	6c 3f       	cpi	r22, 0xFC	; 252
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	72 07       	cpc	r23, r18
     b2e:	23 e0       	ldi	r18, 0x03	; 3
     b30:	82 07       	cpc	r24, r18
     b32:	91 05       	cpc	r25, r1
     b34:	58 f4       	brcc	.+22     	; 0xb4c <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
     b36:	42 e0       	ldi	r20, 0x02	; 2
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	77 95       	ror	r23
     b3e:	67 95       	ror	r22
     b40:	4a 95       	dec	r20
     b42:	d1 f7       	brne	.-12     	; 0xb38 <OsEE_atmega_startTimer1+0x70>
     b44:	61 50       	subi	r22, 0x01	; 1
     b46:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	d6 cf       	rjmp	.-84     	; 0xaf8 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
     b4c:	61 15       	cp	r22, r1
     b4e:	71 05       	cpc	r23, r1
     b50:	20 e1       	ldi	r18, 0x10	; 16
     b52:	82 07       	cpc	r24, r18
     b54:	91 05       	cpc	r25, r1
     b56:	58 f4       	brcc	.+22     	; 0xb6e <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
     b58:	34 e0       	ldi	r19, 0x04	; 4
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	3a 95       	dec	r19
     b64:	d1 f7       	brne	.-12     	; 0xb5a <OsEE_atmega_startTimer1+0x92>
     b66:	61 50       	subi	r22, 0x01	; 1
     b68:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	c5 cf       	rjmp	.-118    	; 0xaf8 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
     b6e:	26 e0       	ldi	r18, 0x06	; 6
     b70:	96 95       	lsr	r25
     b72:	87 95       	ror	r24
     b74:	77 95       	ror	r23
     b76:	67 95       	ror	r22
     b78:	2a 95       	dec	r18
     b7a:	d1 f7       	brne	.-12     	; 0xb70 <OsEE_atmega_startTimer1+0xa8>
     b7c:	61 50       	subi	r22, 0x01	; 1
     b7e:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
     b80:	85 e0       	ldi	r24, 0x05	; 5
     b82:	ba cf       	rjmp	.-140    	; 0xaf8 <OsEE_atmega_startTimer1+0x30>

00000b84 <WaitSem>:
FUNC(StatusType, OS_CODE)
  WaitSem
(
  VAR(SemRefType, AUTOMATIC) Sem
)
{
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <WaitSem+0x14>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
  /* Error Value */
  VAR(StatusType, AUTOMATIC)  ev;

  if (Sem == NULL) {
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	d9 f1       	breq	.+118    	; 0xc16 <WaitSem+0x92>
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
     ba0:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <osEE_cdb_var>
     ba4:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
     ba8:	e0 80       	ld	r14, Z
     baa:	f1 80       	ldd	r15, Z+1	; 0x01
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     bac:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     bae:	f8 94       	cli
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb  = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_curr = osEE_get_curr_task();
    CONST(OsEE_reg, AUTOMATIC) flags  = osEE_begin_primitive();

    if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
     bb0:	f7 01       	movw	r30, r14
     bb2:	27 81       	ldd	r18, Z+7	; 0x07
     bb4:	30 85       	ldd	r19, Z+8	; 0x08
     bb6:	21 30       	cpi	r18, 0x01	; 1
     bb8:	31 05       	cpc	r19, r1
     bba:	51 f5       	brne	.+84     	; 0xc10 <WaitSem+0x8c>
      ev = E_OS_ACCESS;
    } else {
      OSEE_HAL_SPIN_LOCK( &Sem->lock );
      if (Sem->count != 0U) {
     bbc:	fc 01       	movw	r30, r24
     bbe:	22 81       	ldd	r18, Z+2	; 0x02
     bc0:	22 23       	and	r18, r18
     bc2:	89 f0       	breq	.+34     	; 0xbe6 <WaitSem+0x62>
        --Sem->count;
     bc4:	21 50       	subi	r18, 0x01	; 1
     bc6:	22 83       	std	Z+2, r18	; 0x02
#endif /* OSEE_ALLOW_TASK_MIGRATION */

        osEE_change_context_from_running(p_curr, p_to);
      }

      ev = E_OK;
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     bcc:	df be       	out	0x3f, r13	; 63
    }
    osEE_end_primitive(flags);
  }
  return ev;
}
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	08 95       	ret
     be6:	8c 01       	movw	r16, r24
        --Sem->count;
        OSEE_HAL_SPIN_UNLOCK(&Sem->lock);
      } else {
        P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) blocked_sn;
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
          p_to =  osEE_scheduler_task_block_current(p_kdb, &blocked_sn);
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	88 e1       	ldi	r24, 0x18	; 24
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0e 94 b8 08 	call	0x1170	; 0x1170 <osEE_scheduler_task_block_current>
     bf6:	5c 01       	movw	r10, r24

        (void)osEE_sn_priority_insert(&Sem->blocked_queue, blocked_sn, OSEE_FALSE);
     bf8:	69 81       	ldd	r22, Y+1	; 0x01
     bfa:	7a 81       	ldd	r23, Y+2	; 0x02
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 b6 07 	call	0xf6c	; 0xf6c <osEE_sn_priority_insert>
        osEE_get_curr_core()->p_ccb->p_lock_to_be_released = &Sem->lock;
#else
        OSEE_HAL_SPIN_UNLOCK(&Sem->lock);
#endif /* OSEE_ALLOW_TASK_MIGRATION */

        osEE_change_context_from_running(p_curr, p_to);
     c06:	b5 01       	movw	r22, r10
     c08:	c7 01       	movw	r24, r14
     c0a:	0e 94 ce 09 	call	0x139c	; 0x139c <osEE_change_context_from_running>
     c0e:	dc cf       	rjmp	.-72     	; 0xbc8 <WaitSem+0x44>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_curr = osEE_get_curr_task();
    CONST(OsEE_reg, AUTOMATIC) flags  = osEE_begin_primitive();

    if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	db cf       	rjmp	.-74     	; 0xbcc <WaitSem+0x48>
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC)  ev;

  if (Sem == NULL) {
    ev = E_OS_PARAM_POINTER;
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	90 e0       	ldi	r25, 0x00	; 0

      ev = E_OK;
    }
    osEE_end_primitive(flags);
  }
  return ev;
     c1a:	d9 cf       	rjmp	.-78     	; 0xbce <WaitSem+0x4a>

00000c1c <PostSem>:
FUNC(StatusType, OS_CODE)
  PostSem
(
  VAR(SemRefType, AUTOMATIC) Sem
)
{
     c1c:	cf 93       	push	r28
     c1e:	fc 01       	movw	r30, r24
  /* Error Value */
  VAR(StatusType, AUTOMATIC)  ev;

  if (Sem == NULL) {
    ev = E_OS_PARAM_POINTER;
     c20:	8e e0       	ldi	r24, 0x0E	; 14
     c22:	90 e0       	ldi	r25, 0x00	; 0
)
{
  /* Error Value */
  VAR(StatusType, AUTOMATIC)  ev;

  if (Sem == NULL) {
     c24:	30 97       	sbiw	r30, 0x00	; 0
     c26:	c9 f0       	breq	.+50     	; 0xc5a <PostSem+0x3e>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     c28:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     c2a:	f8 94       	cli
  } else {
    CONST(OsEE_reg, AUTOMATIC) flags  = osEE_begin_primitive();
    /* check if the post on the semaphore wakes up someone */
    OSEE_HAL_SPIN_LOCK(&Sem->lock);

    if (Sem->blocked_queue != NULL) {
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	61 15       	cp	r22, r1
     c32:	71 05       	cpc	r23, r1
     c34:	a1 f0       	breq	.+40     	; 0xc5e <PostSem+0x42>
        p_kdb = osEE_get_kernel();
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_released = Sem->blocked_queue;

      /* Remove the head from the blocking queue */
      Sem->blocked_queue = p_sn_released->p_next;
     c36:	db 01       	movw	r26, r22
     c38:	8d 91       	ld	r24, X+
     c3a:	9c 91       	ld	r25, X
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	80 83       	st	Z, r24

      /* Release the TASK (and the SN) */
      is_preemption = osEE_scheduler_task_unblocked(p_kdb, p_sn_released);
     c40:	88 e1       	ldi	r24, 0x18	; 24
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	0e 94 df 08 	call	0x11be	; 0x11be <osEE_scheduler_task_unblocked>

      OSEE_HAL_SPIN_UNLOCK(&Sem->lock);

      if (is_preemption) {
     c48:	89 2b       	or	r24, r25
     c4a:	21 f0       	breq	.+8      	; 0xc54 <PostSem+0x38>
        (void)osEE_scheduler_task_preemption_point(p_kdb);
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     c54:	cf bf       	out	0x3f, r28	; 63
    } else {
      ++Sem->count;
      OSEE_HAL_SPIN_UNLOCK(&Sem->lock);
    }
    osEE_end_primitive(flags);
    ev = E_OK;
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
  }

  return ev;
}
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

      if (is_preemption) {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
      }
    } else {
      ++Sem->count;
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	82 83       	std	Z+2, r24	; 0x02
     c64:	f7 cf       	rjmp	.-18     	; 0xc54 <PostSem+0x38>

00000c66 <StartOS>:
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
     c66:	4f 92       	push	r4
     c68:	5f 92       	push	r5
     c6a:	6f 92       	push	r6
     c6c:	7f 92       	push	r7
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <StartOS+0x22>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <osEE_cdb_var>
     c90:	10 91 1f 02 	lds	r17, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
     c94:	9f b7       	in	r25, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	d8 01       	movw	r26, r16
     c9a:	18 96       	adiw	r26, 0x08	; 8
     c9c:	2d 91       	ld	r18, X+
     c9e:	3c 91       	ld	r19, X
     ca0:	23 2b       	or	r18, r19
     ca2:	b1 f0       	breq	.+44     	; 0xcd0 <StartOS+0x6a>
     ca4:	9f bf       	out	0x3f, r25	; 63
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	08 95       	ret
     cd0:	f8 2e       	mov	r15, r24
     cd2:	87 e2       	ldi	r24, 0x27	; 39
     cd4:	9a e0       	ldi	r25, 0x0A	; 10
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	c0 90 22 02 	lds	r12, 0x0222	; 0x800222 <osEE_cdb_var+0x4>
     cde:	d0 90 23 02 	lds	r13, 0x0223	; 0x800223 <osEE_cdb_var+0x5>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	f8 01       	movw	r30, r16
     ce8:	91 87       	std	Z+9, r25	; 0x09
     cea:	80 87       	std	Z+8, r24	; 0x08
     cec:	f2 86       	std	Z+10, r15	; 0x0a
     cee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <StartupHook>
     cf2:	40 90 24 02 	lds	r4, 0x0224	; 0x800224 <osEE_cdb_var+0x6>
     cf6:	50 90 25 02 	lds	r5, 0x0225	; 0x800225 <osEE_cdb_var+0x7>
     cfa:	58 01       	movw	r10, r16
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
     cfe:	af 0e       	add	r10, r31
     d00:	b1 1c       	adc	r11, r1
     d02:	24 e0       	ldi	r18, 0x04	; 4
     d04:	f2 9e       	mul	r15, r18
     d06:	c0 01       	movw	r24, r0
     d08:	11 24       	eor	r1, r1
     d0a:	48 0e       	add	r4, r24
     d0c:	59 1e       	adc	r5, r25
     d0e:	d2 01       	movw	r26, r4
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	6d 90       	ld	r6, X+
     d14:	7c 90       	ld	r7, X
     d16:	f1 2c       	mov	r15, r1
     d18:	e1 2c       	mov	r14, r1
     d1a:	88 24       	eor	r8, r8
     d1c:	83 94       	inc	r8
     d1e:	91 2c       	mov	r9, r1
     d20:	e6 14       	cp	r14, r6
     d22:	f7 04       	cpc	r15, r7
     d24:	e1 f4       	brne	.+56     	; 0xd5e <StartOS+0xf8>
     d26:	f8 01       	movw	r30, r16
     d28:	80 85       	ldd	r24, Z+8	; 0x08
     d2a:	91 85       	ldd	r25, Z+9	; 0x09
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	21 f4       	brne	.+8      	; 0xd38 <StartOS+0xd2>
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	91 87       	std	Z+9, r25	; 0x09
     d36:	80 87       	std	Z+8, r24	; 0x08
     d38:	d8 01       	movw	r26, r16
     d3a:	18 96       	adiw	r26, 0x08	; 8
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	02 97       	sbiw	r24, 0x02	; 2
     d42:	51 f4       	brne	.+20     	; 0xd58 <StartOS+0xf2>
     d44:	f6 01       	movw	r30, r12
     d46:	62 81       	ldd	r22, Z+2	; 0x02
     d48:	73 81       	ldd	r23, Z+3	; 0x03
     d4a:	ab 01       	movw	r20, r22
     d4c:	c6 01       	movw	r24, r12
     d4e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>
     d52:	c6 01       	movw	r24, r12
     d54:	0e 94 33 08 	call	0x1066	; 0x1066 <osEE_task_end>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	a6 cf       	rjmp	.-180    	; 0xcaa <StartOS+0x44>
     d5e:	d2 01       	movw	r26, r4
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	c7 01       	movw	r24, r14
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	e8 0f       	add	r30, r24
     d6c:	f9 1f       	adc	r31, r25
     d6e:	40 81       	ld	r20, Z
     d70:	51 81       	ldd	r21, Z+1	; 0x01
     d72:	da 01       	movw	r26, r20
     d74:	14 96       	adiw	r26, 0x04	; 4
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 83       	st	Z, r24
     d80:	93 82       	std	Z+3, r9	; 0x03
     d82:	82 82       	std	Z+2, r8	; 0x02
     d84:	f8 01       	movw	r30, r16
     d86:	64 81       	ldd	r22, Z+4	; 0x04
     d88:	75 81       	ldd	r23, Z+5	; 0x05
     d8a:	db 01       	movw	r26, r22
     d8c:	8d 91       	ld	r24, X+
     d8e:	9c 91       	ld	r25, X
     d90:	11 97       	sbiw	r26, 0x01	; 1
     d92:	95 83       	std	Z+5, r25	; 0x05
     d94:	84 83       	std	Z+4, r24	; 0x04
     d96:	1d 92       	st	X+, r1
     d98:	1c 92       	st	X, r1
     d9a:	c5 01       	movw	r24, r10
     d9c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <osEE_scheduler_rq_insert>
     da0:	bf ef       	ldi	r27, 0xFF	; 255
     da2:	eb 1a       	sub	r14, r27
     da4:	fb 0a       	sbc	r15, r27
     da6:	bc cf       	rjmp	.-136    	; 0xd20 <StartOS+0xba>

00000da8 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
     db2:	90 e0       	ldi	r25, 0x00	; 0
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
     db4:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <osEE_kdb_var+0x4>
     db8:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <osEE_kdb_var+0x5>
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	28 f5       	brcc	.+74     	; 0xe0c <ActivateTask+0x64>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
     dc2:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <osEE_kdb_var+0x2>
     dc6:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <osEE_kdb_var+0x3>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	fc 01       	movw	r30, r24
     dd4:	00 81       	ld	r16, Z
     dd6:	11 81       	ldd	r17, Z+1	; 0x01

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
     dd8:	f8 01       	movw	r30, r16
     dda:	87 81       	ldd	r24, Z+7	; 0x07
     ddc:	90 85       	ldd	r25, Z+8	; 0x08
     dde:	02 97       	sbiw	r24, 0x02	; 2
     de0:	a8 f4       	brcc	.+42     	; 0xe0c <ActivateTask+0x64>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     de2:	ff b6       	in	r15, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     de4:	f8 94       	cli
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
     de6:	c8 01       	movw	r24, r16
     de8:	0e 94 21 08 	call	0x1042	; 0x1042 <osEE_task_activated>
     dec:	ec 01       	movw	r28, r24

      if (ev == E_OK) {
     dee:	89 2b       	or	r24, r25
     df0:	29 f4       	brne	.+10     	; 0xdfc <ActivateTask+0x54>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
     df2:	b8 01       	movw	r22, r16
     df4:	88 e1       	ldi	r24, 0x18	; 24
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <osEE_scheduler_task_activated>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     dfc:	ff be       	out	0x3f, r15	; 63
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
     dfe:	ce 01       	movw	r24, r28
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	08 95       	ret
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
     e0c:	c3 e0       	ldi	r28, 0x03	; 3
     e0e:	d0 e0       	ldi	r29, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
     e10:	f6 cf       	rjmp	.-20     	; 0xdfe <ActivateTask+0x56>

00000e12 <osEE_scheduler_task_wrapper_restore>:
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
     e12:	dc 01       	movw	r26, r24
     e14:	14 96       	adiw	r26, 0x04	; 4
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	93 83       	std	Z+3, r25	; 0x03
     e20:	82 83       	std	Z+2, r24	; 0x02
    }
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
     e22:	08 95       	ret

00000e24 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
     e24:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
     e26:	ec 81       	ldd	r30, Y+4	; 0x04
     e28:	fd 81       	ldd	r31, Y+5	; 0x05
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
     e2c:	24 e0       	ldi	r18, 0x04	; 4
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	33 83       	std	Z+3, r19	; 0x03
     e32:	22 83       	std	Z+2, r18	; 0x02
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	09 f0       	breq	.+2      	; 0xe3a <osEE_scheduler_task_wrapper_run+0x16>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     e38:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
     e3a:	e9 85       	ldd	r30, Y+9	; 0x09
     e3c:	fa 85       	ldd	r31, Y+10	; 0x0a
     e3e:	09 95       	icall
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
     e40:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <osEE_cdb_var>
     e44:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <osEE_cdb_var+0x1>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
     e48:	10 8a       	std	Z+16, r1	; 0x10
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
     e4a:	87 85       	ldd	r24, Z+15	; 0x0f
     e4c:	88 23       	and	r24, r24
     e4e:	19 f0       	breq	.+6      	; 0xe56 <osEE_scheduler_task_wrapper_run+0x32>
    p_ccb->s_isr_all_cnt = 0U;
     e50:	17 86       	std	Z+15, r1	; 0x0f
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
     e52:	85 85       	ldd	r24, Z+13	; 0x0d
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     e54:	8f bf       	out	0x3f, r24	; 63
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
     e56:	81 89       	ldd	r24, Z+17	; 0x11
     e58:	88 23       	and	r24, r24
     e5a:	11 f0       	breq	.+4      	; 0xe60 <osEE_scheduler_task_wrapper_run+0x3c>
    p_ccb->d_isr_all_cnt = 0U;
     e5c:	11 8a       	std	Z+17, r1	; 0x11
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     e5e:	78 94       	sei
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     e60:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     e62:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     e64:	6f e0       	ldi	r22, 0x0F	; 15
     e66:	7a e0       	ldi	r23, 0x0A	; 10
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	9b 81       	ldd	r25, Y+3	; 0x03
     e6c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <osEE_hal_terminate_ctx>

00000e70 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     e78:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     e7a:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
     e7c:	88 e1       	ldi	r24, 0x18	; 24
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     e84:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     e86:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <osEE_cdb_var>
     e8a:	10 91 1f 02 	lds	r17, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
     e8e:	c0 91 20 02 	lds	r28, 0x0220	; 0x800220 <osEE_cdb_var+0x2>
     e92:	d0 91 21 02 	lds	r29, 0x0221	; 0x800221 <osEE_cdb_var+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
     e96:	f8 01       	movw	r30, r16
     e98:	80 85       	ldd	r24, Z+8	; 0x08
     e9a:	91 85       	ldd	r25, Z+9	; 0x09
     e9c:	02 97       	sbiw	r24, 0x02	; 2
     e9e:	51 f0       	breq	.+20     	; 0xeb4 <osEE_idle_hook_wrapper+0x44>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     ea0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <osEE_cdb_var+0x4>
     ea4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <osEE_cdb_var+0x5>
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
     eb0:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
     eb4:	20 97       	sbiw	r28, 0x00	; 0
     eb6:	79 f3       	breq	.-34     	; 0xe96 <osEE_idle_hook_wrapper+0x26>
      p_idle_hook();
     eb8:	fe 01       	movw	r30, r28
     eba:	09 95       	icall
     ebc:	ec cf       	rjmp	.-40     	; 0xe96 <osEE_idle_hook_wrapper+0x26>

00000ebe <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
     ec6:	ec 01       	movw	r28, r24
     ec8:	a8 81       	ld	r26, Y
     eca:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
     ecc:	eb 01       	movw	r28, r22
     ece:	e8 81       	ld	r30, Y
     ed0:	f9 81       	ldd	r31, Y+1	; 0x01
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
     ed2:	16 96       	adiw	r26, 0x06	; 6
     ed4:	cd 91       	ld	r28, X+
     ed6:	dc 91       	ld	r29, X
     ed8:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	c1 f1       	breq	.+112    	; 0xf4e <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
     ee2:	30 97       	sbiw	r30, 0x00	; 0
     ee4:	09 f4       	brne	.+2      	; 0xee8 <osEE_scheduler_core_rq_preempt_stk+0x2a>
     ee6:	3f c0       	rjmp	.+126    	; 0xf66 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
     ee8:	ec 01       	movw	r28, r24
     eea:	0c 81       	ldd	r16, Y+4	; 0x04
     eec:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
     eee:	22 81       	ldd	r18, Z+2	; 0x02
     ef0:	33 81       	ldd	r19, Z+3	; 0x03
     ef2:	e9 01       	movw	r28, r18
     ef4:	4c 81       	ldd	r20, Y+4	; 0x04
     ef6:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
     ef8:	e8 01       	movw	r28, r16
     efa:	39 81       	ldd	r19, Y+1	; 0x01
     efc:	ea 01       	movw	r28, r20
     efe:	29 81       	ldd	r18, Y+1	; 0x01
     f00:	32 17       	cp	r19, r18
     f02:	88 f5       	brcc	.+98     	; 0xf66 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
     f04:	22 e0       	ldi	r18, 0x02	; 2
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	e8 01       	movw	r28, r16
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
     f0a:	3b 83       	std	Y+3, r19	; 0x03
     f0c:	2a 83       	std	Y+2, r18	; 0x02
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
     f0e:	20 81       	ld	r18, Z
     f10:	31 81       	ldd	r19, Z+1	; 0x01
     f12:	eb 01       	movw	r28, r22
     f14:	39 83       	std	Y+1, r19	; 0x01
     f16:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
     f18:	c2 81       	ldd	r28, Z+2	; 0x02
     f1a:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
     f20:	16 96       	adiw	r26, 0x06	; 6
     f22:	4d 91       	ld	r20, X+
     f24:	5c 91       	ld	r21, X
     f26:	17 97       	sbiw	r26, 0x07	; 7
     f28:	51 83       	std	Z+1, r21	; 0x01
     f2a:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
     f2c:	17 96       	adiw	r26, 0x07	; 7
     f2e:	fc 93       	st	X, r31
     f30:	ee 93       	st	-X, r30
     f32:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
     f34:	cd 93       	st	X+, r28
     f36:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
     f38:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
     f3a:	f9 01       	movw	r30, r18
     f3c:	51 81       	ldd	r21, Z+1	; 0x01
     f3e:	54 17       	cp	r21, r20
     f40:	08 f4       	brcc	.+2      	; 0xf44 <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
     f42:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
     f4e:	30 97       	sbiw	r30, 0x00	; 0
     f50:	51 f0       	breq	.+20     	; 0xf66 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
     f52:	ec 01       	movw	r28, r24
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
     f56:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
     f58:	ec 01       	movw	r28, r24
     f5a:	4c 81       	ldd	r20, Y+4	; 0x04
     f5c:	5d 81       	ldd	r21, Y+5	; 0x05
     f5e:	22 e0       	ldi	r18, 0x02	; 2
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	ea 01       	movw	r28, r20
     f64:	d2 cf       	rjmp	.-92     	; 0xf0a <osEE_scheduler_core_rq_preempt_stk+0x4c>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
     f6a:	ec cf       	rjmp	.-40     	; 0xf44 <osEE_scheduler_core_rq_preempt_stk+0x86>

00000f6c <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
     f70:	db 01       	movw	r26, r22
     f72:	12 96       	adiw	r26, 0x02	; 2
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
     f78:	41 15       	cp	r20, r1
     f7a:	51 05       	cpc	r21, r1
     f7c:	a1 f0       	breq	.+40     	; 0xfa6 <osEE_sn_priority_insert+0x3a>
     f7e:	23 85       	ldd	r18, Z+11	; 0x0b
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
     f80:	dc 01       	movw	r26, r24
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	89 f4       	brne	.+34     	; 0xfb0 <osEE_sn_priority_insert+0x44>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
     f8e:	10 97       	sbiw	r26, 0x00	; 0
     f90:	09 f1       	breq	.+66     	; 0xfd4 <osEE_sn_priority_insert+0x68>
    p_prev->p_next = p_sn_new;
     f92:	6d 93       	st	X+, r22
     f94:	7c 93       	st	X, r23
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
     f9a:	db 01       	movw	r26, r22
     f9c:	ed 93       	st	X+, r30
     f9e:	fc 93       	st	X, r31

  return head_changed;
}
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
     fa6:	04 80       	ldd	r0, Z+4	; 0x04
     fa8:	f5 81       	ldd	r31, Z+5	; 0x05
     faa:	e0 2d       	mov	r30, r0
     fac:	21 81       	ldd	r18, Z+1	; 0x01
     fae:	e8 cf       	rjmp	.-48     	; 0xf80 <osEE_sn_priority_insert+0x14>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
     fb0:	c2 81       	ldd	r28, Z+2	; 0x02
     fb2:	d3 81       	ldd	r29, Z+3	; 0x03
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
     fb4:	41 15       	cp	r20, r1
     fb6:	51 05       	cpc	r21, r1
     fb8:	41 f0       	breq	.+16     	; 0xfca <osEE_sn_priority_insert+0x5e>
      prio_to_check = p_cur_tdb->ready_prio;
     fba:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
     fbc:	32 17       	cp	r19, r18
     fbe:	38 f3       	brcs	.-50     	; 0xf8e <osEE_sn_priority_insert+0x22>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
     fc0:	df 01       	movw	r26, r30
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	e0 cf       	rjmp	.-64     	; 0xf8a <osEE_sn_priority_insert+0x1e>
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
     fca:	0c 80       	ldd	r0, Y+4	; 0x04
     fcc:	dd 81       	ldd	r29, Y+5	; 0x05
     fce:	c0 2d       	mov	r28, r0
     fd0:	39 81       	ldd	r19, Y+1	; 0x01
     fd2:	f4 cf       	rjmp	.-24     	; 0xfbc <osEE_sn_priority_insert+0x50>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
     fd4:	dc 01       	movw	r26, r24
     fd6:	6d 93       	st	X+, r22
     fd8:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	dd cf       	rjmp	.-70     	; 0xf9a <osEE_sn_priority_insert+0x2e>

00000fe0 <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
     fe0:	fb 01       	movw	r30, r22
     fe2:	53 83       	std	Z+3, r21	; 0x03
     fe4:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <osEE_sn_priority_insert>

00000fee <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
     ffc:	fc 01       	movw	r30, r24
     ffe:	c0 81       	ld	r28, Z
    1000:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1002:	ee 80       	ldd	r14, Y+6	; 0x06
    1004:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1006:	f7 01       	movw	r30, r14
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	9f 83       	std	Y+7, r25	; 0x07
    100e:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1010:	c8 01       	movw	r24, r16
    1012:	0e 94 5f 07 	call	0xebe	; 0xebe <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1016:	89 2b       	or	r24, r25
    1018:	41 f4       	brne	.+16     	; 0x102a <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    101a:	ee 81       	ldd	r30, Y+6	; 0x06
    101c:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	61 f0       	breq	.+24     	; 0x103a <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1026:	99 83       	std	Y+1, r25	; 0x01
    1028:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    102a:	c7 01       	movw	r24, r14
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	08 95       	ret
      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    103a:	f8 01       	movw	r30, r16
    103c:	84 81       	ldd	r24, Z+4	; 0x04
    103e:	95 81       	ldd	r25, Z+5	; 0x05
    1040:	f2 cf       	rjmp	.-28     	; 0x1026 <osEE_scheduler_core_pop_running+0x38>

00001042 <osEE_task_activated>:
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
    1042:	dc 01       	movw	r26, r24
    1044:	14 96       	adiw	r26, 0x04	; 4
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	15 97       	sbiw	r26, 0x05	; 5
    104c:	90 81       	ld	r25, Z
    104e:	1d 96       	adiw	r26, 0x0d	; 13
    1050:	8c 91       	ld	r24, X
    1052:	98 17       	cp	r25, r24
    1054:	28 f4       	brcc	.+10     	; 0x1060 <osEE_task_activated+0x1e>
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	90 83       	st	Z, r25
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	08 95       	ret

00001066 <osEE_task_end>:
    1066:	dc 01       	movw	r26, r24
    1068:	14 96       	adiw	r26, 0x04	; 4
    106a:	ed 91       	ld	r30, X+
    106c:	fc 91       	ld	r31, X
    106e:	15 97       	sbiw	r26, 0x05	; 5
    1070:	1b 96       	adiw	r26, 0x0b	; 11
    1072:	8c 91       	ld	r24, X
    1074:	81 83       	std	Z+1, r24	; 0x01
    1076:	80 81       	ld	r24, Z
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	80 83       	st	Z, r24
    107c:	81 11       	cpse	r24, r1
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <osEE_task_end+0x20>
    1080:	13 82       	std	Z+3, r1	; 0x03
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	08 95       	ret
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	93 83       	std	Z+3, r25	; 0x03
    108c:	82 83       	std	Z+2, r24	; 0x02
    108e:	08 95       	ret

00001090 <osEE_activate_isr2>:
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    1090:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <osEE_kdb_var+0x2>
    1094:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <osEE_kdb_var+0x3>
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
    10a6:	db 01       	movw	r26, r22
    10a8:	14 96       	adiw	r26, 0x04	; 4
    10aa:	ed 91       	ld	r30, X+
    10ac:	fc 91       	ld	r31, X
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 83       	st	Z, r24

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	88 e1       	ldi	r24, 0x18	; 24
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	0c 94 96 09 	jmp	0x132c	; 0x132c <osEE_scheduler_task_set_running>

000010c0 <osEE_scheduler_task_activated>:
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    p_tcb_act->status = OSEE_TASK_READY;
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	db 01       	movw	r26, r22
    10ce:	14 96       	adiw	r26, 0x04	; 4
    10d0:	ed 90       	ld	r14, X+
    10d2:	fc 90       	ld	r15, X
    10d4:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <osEE_cdb_var>
    10d8:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	ec 01       	movw	r28, r24
    10e2:	4c 81       	ldd	r20, Y+4	; 0x04
    10e4:	5d 81       	ldd	r21, Y+5	; 0x05
    10e6:	a4 81       	ldd	r26, Z+4	; 0x04
    10e8:	b5 81       	ldd	r27, Z+5	; 0x05
    10ea:	2d 91       	ld	r18, X+
    10ec:	3c 91       	ld	r19, X
    10ee:	11 97       	sbiw	r26, 0x01	; 1
    10f0:	ea 01       	movw	r28, r20
    10f2:	09 81       	ldd	r16, Y+1	; 0x01
    10f4:	e7 01       	movw	r28, r14
    10f6:	19 81       	ldd	r17, Y+1	; 0x01
    10f8:	01 17       	cp	r16, r17
    10fa:	10 f5       	brcc	.+68     	; 0x1140 <osEE_scheduler_task_activated+0x80>
    10fc:	35 83       	std	Z+5, r19	; 0x05
    10fe:	24 83       	std	Z+4, r18	; 0x04
    1100:	22 e0       	ldi	r18, 0x02	; 2
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	ea 01       	movw	r28, r20
    1106:	3b 83       	std	Y+3, r19	; 0x03
    1108:	2a 83       	std	Y+2, r18	; 0x02
    110a:	13 96       	adiw	r26, 0x03	; 3
    110c:	7c 93       	st	X, r23
    110e:	6e 93       	st	-X, r22
    1110:	12 97       	sbiw	r26, 0x02	; 2
    1112:	26 81       	ldd	r18, Z+6	; 0x06
    1114:	37 81       	ldd	r19, Z+7	; 0x07
    1116:	11 96       	adiw	r26, 0x01	; 1
    1118:	3c 93       	st	X, r19
    111a:	2e 93       	st	-X, r18
    111c:	b7 83       	std	Z+7, r27	; 0x07
    111e:	a6 83       	std	Z+6, r26	; 0x06
    1120:	71 83       	std	Z+1, r23	; 0x01
    1122:	60 83       	st	Z, r22
    1124:	f7 01       	movw	r30, r14
    1126:	17 82       	std	Z+7, r1	; 0x07
    1128:	16 82       	std	Z+6, r1	; 0x06
    112a:	0e 94 ce 09 	call	0x139c	; 0x139c <osEE_change_context_from_running>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	89 2b       	or	r24, r25
    1146:	31 f4       	brne	.+12     	; 0x1154 <osEE_scheduler_task_activated+0x94>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02
    1150:	1f 82       	std	Y+7, r1	; 0x07
    1152:	1e 82       	std	Y+6, r1	; 0x06
    1154:	35 83       	std	Z+5, r19	; 0x05
    1156:	24 83       	std	Z+4, r18	; 0x04
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	1c 92       	st	X, r1
    115c:	1e 92       	st	-X, r1
    115e:	ab 01       	movw	r20, r22
    1160:	bd 01       	movw	r22, r26
    1162:	cf 01       	movw	r24, r30
    1164:	02 96       	adiw	r24, 0x02	; 2
    1166:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <osEE_scheduler_rq_insert>
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	e1 cf       	rjmp	.-62     	; 0x1132 <osEE_scheduler_task_activated+0x72>

00001170 <osEE_scheduler_task_block_current>:
  osEE_scheduler_task_block_current
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	7b 01       	movw	r14, r22
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    117e:	c0 91 1e 02 	lds	r28, 0x021E	; 0x80021e <osEE_cdb_var>
    1182:	d0 91 1f 02 	lds	r29, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    1186:	de 01       	movw	r26, r28
    1188:	0d 91       	ld	r16, X+
    118a:	1d 91       	ld	r17, X+
    118c:	bd 01       	movw	r22, r26

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    118e:	8e e1       	ldi	r24, 0x1E	; 30
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	0e 94 f7 07 	call	0xfee	; 0xfee <osEE_scheduler_core_pop_running>
    1196:	f7 01       	movw	r30, r14
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    119c:	d8 01       	movw	r26, r16
    119e:	14 96       	adiw	r26, 0x04	; 4
    11a0:	ed 91       	ld	r30, X+
    11a2:	fc 91       	ld	r31, X
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	93 83       	std	Z+3, r25	; 0x03
    11aa:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    11ac:	88 81       	ld	r24, Y
    11ae:	99 81       	ldd	r25, Y+1	; 0x01
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	08 95       	ret

000011be <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    11c6:	db 01       	movw	r26, r22
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	4d 91       	ld	r20, X+
    11cc:	5c 91       	ld	r21, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    11ce:	fa 01       	movw	r30, r20
    11d0:	c4 81       	ldd	r28, Z+4	; 0x04
    11d2:	d5 81       	ldd	r29, Z+5	; 0x05
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    11d4:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <osEE_cdb_var>
    11d8:	10 91 1f 02 	lds	r17, 0x021F	; 0x80021f <osEE_cdb_var+0x1>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    11e4:	83 85       	ldd	r24, Z+11	; 0x0b
    11e6:	89 83       	std	Y+1, r24	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    11e8:	c8 01       	movw	r24, r16
    11ea:	02 96       	adiw	r24, 0x02	; 2
    11ec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	91 f4       	brne	.+36     	; 0x1218 <osEE_scheduler_task_unblocked+0x5a>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    11f4:	d8 01       	movw	r26, r16
    11f6:	ed 91       	ld	r30, X+
    11f8:	fc 91       	ld	r31, X
    11fa:	04 80       	ldd	r0, Z+4	; 0x04
    11fc:	f5 81       	ldd	r31, Z+5	; 0x05
    11fe:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	39 81       	ldd	r19, Y+1	; 0x01
    1206:	21 81       	ldd	r18, Z+1	; 0x01
    1208:	23 17       	cp	r18, r19
    120a:	08 f0       	brcs	.+2      	; 0x120e <osEE_scheduler_task_unblocked+0x50>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    121c:	f8 cf       	rjmp	.-16     	; 0x120e <osEE_scheduler_task_unblocked+0x50>

0000121e <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1232:	c0 91 1e 02 	lds	r28, 0x021E	; 0x80021e <osEE_cdb_var>
    1236:	d0 91 1f 02 	lds	r29, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    123a:	fe 01       	movw	r30, r28
    123c:	e1 90       	ld	r14, Z+
    123e:	f1 90       	ld	r15, Z+
    1240:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1242:	f7 01       	movw	r30, r14
    1244:	04 81       	ldd	r16, Z+4	; 0x04
    1246:	15 81       	ldd	r17, Z+5	; 0x05

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1248:	fb 01       	movw	r30, r22
    124a:	f1 82       	std	Z+1, r15	; 0x01
    124c:	e0 82       	st	Z, r14

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    124e:	f8 01       	movw	r30, r16
    1250:	82 81       	ldd	r24, Z+2	; 0x02
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	04 97       	sbiw	r24, 0x04	; 4
    1256:	31 f5       	brne	.+76     	; 0x12a4 <osEE_scheduler_task_terminated+0x86>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1258:	b6 01       	movw	r22, r12
    125a:	8e e1       	ldi	r24, 0x1E	; 30
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	0e 94 f7 07 	call	0xfee	; 0xfee <osEE_scheduler_core_pop_running>
    1262:	5c 01       	movw	r10, r24

      p_tdb_to = p_ccb->p_curr;
    1264:	c8 80       	ld	r12, Y
    1266:	d9 80       	ldd	r13, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1268:	ec 14       	cp	r14, r12
    126a:	fd 04       	cpc	r15, r13
    126c:	b1 f0       	breq	.+44     	; 0x129a <osEE_scheduler_task_terminated+0x7c>
        osEE_task_end(p_tdb_term);
    126e:	c7 01       	movw	r24, r14
    1270:	0e 94 33 08 	call	0x1066	; 0x1066 <osEE_task_end>
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	f5 01       	movw	r30, r10
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
  (*pp_first)       = p_to_free;
    127e:	bd 82       	std	Y+5, r11	; 0x05
    1280:	ac 82       	std	Y+4, r10	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1282:	c6 01       	movw	r24, r12
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	08 95       	ret
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    129a:	f8 01       	movw	r30, r16
    129c:	80 81       	ld	r24, Z
    129e:	81 50       	subi	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
    12a2:	e8 cf       	rjmp	.-48     	; 0x1274 <osEE_scheduler_task_terminated+0x56>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    12a4:	6e 81       	ldd	r22, Y+6	; 0x06
    12a6:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    12a8:	fb 01       	movw	r30, r22
    12aa:	80 81       	ld	r24, Z
    12ac:	91 81       	ldd	r25, Z+1	; 0x01
    12ae:	9f 83       	std	Y+7, r25	; 0x07
    12b0:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    12b2:	f7 01       	movw	r30, r14
    12b4:	83 85       	ldd	r24, Z+11	; 0x0b
    12b6:	f8 01       	movw	r30, r16
    12b8:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	93 83       	std	Z+3, r25	; 0x03
    12c0:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    12c2:	80 81       	ld	r24, Z
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	11 f4       	brne	.+4      	; 0x12cc <osEE_scheduler_task_terminated+0xae>
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
    12c8:	17 82       	std	Z+7, r1	; 0x07
    12ca:	16 82       	std	Z+6, r1	; 0x06
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    12cc:	a7 01       	movw	r20, r14
    12ce:	c6 01       	movw	r24, r12
    12d0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    12d4:	b6 01       	movw	r22, r12
    12d6:	8e e1       	ldi	r24, 0x1E	; 30
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 5f 07 	call	0xebe	; 0xebe <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    12de:	89 2b       	or	r24, r25
    12e0:	39 f4       	brne	.+14     	; 0x12f0 <osEE_scheduler_task_terminated+0xd2>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    12e2:	ee 81       	ldd	r30, Y+6	; 0x06
    12e4:	ff 81       	ldd	r31, Y+7	; 0x07
    12e6:	c2 80       	ldd	r12, Z+2	; 0x02
    12e8:	d3 80       	ldd	r13, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    12ea:	d9 82       	std	Y+1, r13	; 0x01
    12ec:	c8 82       	st	Y, r12
    12ee:	c9 cf       	rjmp	.-110    	; 0x1282 <osEE_scheduler_task_terminated+0x64>
        } else {
          p_tdb_to = p_ccb->p_curr;
    12f0:	c8 80       	ld	r12, Y
    12f2:	d9 80       	ldd	r13, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    12f4:	c6 cf       	rjmp	.-116    	; 0x1282 <osEE_scheduler_task_terminated+0x64>

000012f6 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    12fa:	c0 91 1e 02 	lds	r28, 0x021E	; 0x80021e <osEE_cdb_var>
    12fe:	d0 91 1f 02 	lds	r29, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1302:	be 01       	movw	r22, r28
    1304:	6e 5f       	subi	r22, 0xFE	; 254
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8e e1       	ldi	r24, 0x1E	; 30
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 5f 07 	call	0xebe	; 0xebe <osEE_scheduler_core_rq_preempt_stk>

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	49 f0       	breq	.+18     	; 0x1326 <osEE_scheduler_task_preemption_point+0x30>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
    1314:	68 81       	ld	r22, Y
    1316:	79 81       	ldd	r23, Y+1	; 0x01
    1318:	0e 94 ce 09 	call	0x139c	; 0x139c <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
  }

  return is_preemption;
    132a:	fa cf       	rjmp	.-12     	; 0x1320 <osEE_scheduler_task_preemption_point+0x2a>

0000132c <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1330:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <osEE_cdb_var>
    1334:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <osEE_cdb_var+0x1>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    133c:	26 81       	ldd	r18, Z+6	; 0x06
    133e:	37 81       	ldd	r19, Z+7	; 0x07

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
    1340:	ec 01       	movw	r28, r24
    1342:	ac 81       	ldd	r26, Y+4	; 0x04
    1344:	bd 81       	ldd	r27, Y+5	; 0x05
    1346:	12 96       	adiw	r26, 0x02	; 2
    1348:	cd 91       	ld	r28, X+
    134a:	dc 91       	ld	r29, X
    134c:	13 97       	sbiw	r26, 0x03	; 3
    134e:	24 97       	sbiw	r28, 0x04	; 4
    1350:	31 f4       	brne	.+12     	; 0x135e <osEE_scheduler_task_set_running+0x32>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1352:	c2 e0       	ldi	r28, 0x02	; 2
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    1356:	13 96       	adiw	r26, 0x03	; 3
    1358:	dc 93       	st	X, r29
    135a:	ce 93       	st	-X, r28
    135c:	12 97       	sbiw	r26, 0x02	; 2
  }
  p_ccb->p_curr                 = p_tdb;
    135e:	71 83       	std	Z+1, r23	; 0x01
    1360:	60 83       	st	Z, r22

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
    1362:	41 15       	cp	r20, r1
    1364:	51 05       	cpc	r21, r1
    1366:	b9 f4       	brne	.+46     	; 0x1396 <osEE_scheduler_task_set_running+0x6a>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
    1368:	a4 81       	ldd	r26, Z+4	; 0x04
    136a:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_first)              = p_sn_allocated->p_next;
    136c:	4d 91       	ld	r20, X+
    136e:	5c 91       	ld	r21, X
    1370:	11 97       	sbiw	r26, 0x01	; 1
    1372:	55 83       	std	Z+5, r21	; 0x05
    1374:	44 83       	std	Z+4, r20	; 0x04
  p_sn_allocated->p_next  = NULL;
    1376:	11 96       	adiw	r26, 0x01	; 1
    1378:	1c 92       	st	X, r1
    137a:	1e 92       	st	-X, r1
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
    137c:	b7 83       	std	Z+7, r27	; 0x07
    137e:	a6 83       	std	Z+6, r26	; 0x06
  } else {
    p_ccb->p_stk_sn             = p_sn;
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    1380:	06 80       	ldd	r0, Z+6	; 0x06
    1382:	f7 81       	ldd	r31, Z+7	; 0x07
    1384:	e0 2d       	mov	r30, r0
    1386:	73 83       	std	Z+3, r23	; 0x03
    1388:	62 83       	std	Z+2, r22	; 0x02
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    138a:	31 83       	std	Z+1, r19	; 0x01
    138c:	20 83       	st	Z, r18

  osEE_change_context_from_running(p_preempted, p_tdb);
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    1392:	0c 94 ce 09 	jmp	0x139c	; 0x139c <osEE_change_context_from_running>
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
    1396:	57 83       	std	Z+7, r21	; 0x07
    1398:	46 83       	std	Z+6, r20	; 0x06
    139a:	f2 cf       	rjmp	.-28     	; 0x1380 <osEE_scheduler_task_set_running+0x54>

0000139c <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    139c:	fb 01       	movw	r30, r22
    139e:	dc 01       	movw	r26, r24
    13a0:	12 96       	adiw	r26, 0x02	; 2
    13a2:	4d 91       	ld	r20, X+
    13a4:	5c 91       	ld	r21, X
    13a6:	62 81       	ldd	r22, Z+2	; 0x02
    13a8:	73 81       	ldd	r23, Z+3	; 0x03
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    13aa:	a4 81       	ldd	r26, Z+4	; 0x04
    13ac:	b5 81       	ldd	r27, Z+5	; 0x05
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	8d 91       	ld	r24, X+
    13b2:	9c 91       	ld	r25, X
    13b4:	02 97       	sbiw	r24, 0x02	; 2
    13b6:	19 f4       	brne	.+6      	; 0x13be <osEE_change_context_from_running+0x22>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    13b8:	cf 01       	movw	r24, r30
    13ba:	0c 94 88 00 	jmp	0x110	; 0x110 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    13be:	cf 01       	movw	r24, r30
    13c0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <osEE_hal_save_ctx_and_ready2stacked>

000013c4 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    13c4:	cb 01       	movw	r24, r22
    13c6:	db 01       	movw	r26, r22
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	6d 91       	ld	r22, X+
    13cc:	7c 91       	ld	r23, X
    13ce:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    13d0:	14 96       	adiw	r26, 0x04	; 4
    13d2:	ed 91       	ld	r30, X+
    13d4:	fc 91       	ld	r31, X
    13d6:	22 81       	ldd	r18, Z+2	; 0x02
    13d8:	33 81       	ldd	r19, Z+3	; 0x03
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	11 f4       	brne	.+4      	; 0x13e4 <osEE_change_context_from_task_end+0x20>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    13e0:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    13e4:	0c 94 c8 00 	jmp	0x190	; 0x190 <osEE_hal_ready2stacked>

000013e8 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    13e8:	dc 01       	movw	r26, r24
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	6d 91       	ld	r22, X+
    13ee:	7c 91       	ld	r23, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
    13f2:	ed 91       	ld	r30, X+
    13f4:	fc 91       	ld	r31, X
    13f6:	40 81       	ld	r20, Z
    13f8:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    13fa:	db 01       	movw	r26, r22
    13fc:	ed 91       	ld	r30, X+
    13fe:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    1400:	22 89       	ldd	r18, Z+18	; 0x12
    1402:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1404:	21 15       	cp	r18, r1
    1406:	31 05       	cpc	r19, r1
    1408:	19 f0       	breq	.+6      	; 0x1410 <osEE_idle_task_terminate+0x28>
    140a:	42 17       	cp	r20, r18
    140c:	53 07       	cpc	r21, r19
    140e:	29 f4       	brne	.+10     	; 0x141a <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    1410:	db 01       	movw	r26, r22
    1412:	ed 93       	st	X+, r30
    1414:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1416:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_restore_ctx>
    141a:	f9 01       	movw	r30, r18
    141c:	f1 cf       	rjmp	.-30     	; 0x1400 <osEE_idle_task_terminate+0x18>

0000141e <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	00 d0       	rcall	.+0      	; 0x1424 <osEE_scheduler_task_end+0x6>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
    1428:	be 01       	movw	r22, r28
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	88 e1       	ldi	r24, 0x18	; 24
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 0f 09 	call	0x121e	; 0x121e <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1436:	bc 01       	movw	r22, r24
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    144a:	f8 94       	cli
    144c:	ff cf       	rjmp	.-2      	; 0x144c <__vector_default+0x2>

0000144e <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    144e:	ea e4       	ldi	r30, 0x4A	; 74
}
    1450:	08 95       	ret

00001452 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	0e 94 31 0a 	call	0x1462	; 0x1462 <osEE_avr8_isr2_stub>
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	18 95       	reti

00001462 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	af 93       	push	r26
    147a:	bf 93       	push	r27
    147c:	ef 93       	push	r30
    147e:	ff 93       	push	r31
  /* Disable IRQ */
  OSEE_hal_disableIRQ();
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);
    1480:	0e 94 48 08 	call	0x1090	; 0x1090 <osEE_activate_isr2>

  OSEE_AVR8_ISR_POSTINSTUB();
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1

  OSEE_RETURN();
    14a0:	08 95       	ret

000014a2 <__udivmodsi4>:
    14a2:	a1 e2       	ldi	r26, 0x21	; 33
    14a4:	1a 2e       	mov	r1, r26
    14a6:	aa 1b       	sub	r26, r26
    14a8:	bb 1b       	sub	r27, r27
    14aa:	fd 01       	movw	r30, r26
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <__udivmodsi4_ep>

000014ae <__udivmodsi4_loop>:
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	ee 1f       	adc	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	a2 17       	cp	r26, r18
    14b8:	b3 07       	cpc	r27, r19
    14ba:	e4 07       	cpc	r30, r20
    14bc:	f5 07       	cpc	r31, r21
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__udivmodsi4_ep>
    14c0:	a2 1b       	sub	r26, r18
    14c2:	b3 0b       	sbc	r27, r19
    14c4:	e4 0b       	sbc	r30, r20
    14c6:	f5 0b       	sbc	r31, r21

000014c8 <__udivmodsi4_ep>:
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a 94       	dec	r1
    14d2:	69 f7       	brne	.-38     	; 0x14ae <__udivmodsi4_loop>
    14d4:	60 95       	com	r22
    14d6:	70 95       	com	r23
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	cf 01       	movw	r24, r30
    14e4:	08 95       	ret

000014e6 <__tablejump2__>:
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	05 90       	lpm	r0, Z+
    14ec:	f4 91       	lpm	r31, Z
    14ee:	e0 2d       	mov	r30, r0
    14f0:	09 94       	ijmp

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
