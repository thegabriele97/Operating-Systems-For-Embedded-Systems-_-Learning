
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800100  000019d0  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d0  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c0  00800354  00800354  00001cb8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00001d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015cc6  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000343d  00000000  00000000  00017fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004816  00000000  00000000  0001b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ee4  00000000  00000000  0001fc34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e00  00000000  00000000  00020b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006829  00000000  00000000  00024918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000850  00000000  00000000  0002b141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_16>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_18>
      4c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_19>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	1f 04       	cpc	r1, r15

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e0 ed       	ldi	r30, 0xD0	; 208
      7e:	f9 e1       	ldi	r31, 0x19	; 25
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a4 35       	cpi	r26, 0x54	; 84
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	25 e0       	ldi	r18, 0x05	; 5
      8e:	a4 e5       	ldi	r26, 0x54	; 84
      90:	b3 e0       	ldi	r27, 0x03	; 3
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 31       	cpi	r26, 0x14	; 20
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
      b6:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_default>
	...

000000c0 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
      c0:	2f 92       	push	r2
      c2:	3f 92       	push	r3
      c4:	4f 92       	push	r4
      c6:	5f 92       	push	r5
      c8:	6f 92       	push	r6
      ca:	7f 92       	push	r7
      cc:	8f 92       	push	r8
      ce:	9f 92       	push	r9
      d0:	af 92       	push	r10
      d2:	bf 92       	push	r11
      d4:	cf 92       	push	r12
      d6:	df 92       	push	r13
      d8:	ef 92       	push	r14
      da:	ff 92       	push	r15
      dc:	0f 93       	push	r16
      de:	1f 93       	push	r17
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	e4 2f       	mov	r30, r20
      e6:	f5 2f       	mov	r31, r21
      e8:	41 90       	ld	r4, Z+
      ea:	50 80       	ld	r5, Z
      ec:	4f 92       	push	r4
      ee:	5f 92       	push	r5
      f0:	e4 2f       	mov	r30, r20
      f2:	f5 2f       	mov	r31, r21
      f4:	4d b6       	in	r4, 0x3d	; 61
      f6:	5e b6       	in	r5, 0x3e	; 62
      f8:	41 92       	st	Z+, r4
      fa:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
      fc:	0c 94 80 00 	jmp	0x100	; 0x100 <osEE_hal_restore_ctx>

00000100 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     100:	e6 2f       	mov	r30, r22
     102:	f7 2f       	mov	r31, r23
     104:	41 90       	ld	r4, Z+
     106:	50 80       	ld	r5, Z
     108:	4d be       	out	0x3d, r4	; 61
     10a:	5e be       	out	0x3e, r5	; 62
     10c:	5f 90       	pop	r5
     10e:	4f 90       	pop	r4
     110:	e6 2f       	mov	r30, r22
     112:	f7 2f       	mov	r31, r23
     114:	41 92       	st	Z+, r4
     116:	50 82       	st	Z, r5
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	bf 90       	pop	r11
     12a:	af 90       	pop	r10
     12c:	9f 90       	pop	r9
     12e:	8f 90       	pop	r8
     130:	7f 90       	pop	r7
     132:	6f 90       	pop	r6
     134:	5f 90       	pop	r5
     136:	4f 90       	pop	r4
     138:	3f 90       	pop	r3
     13a:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     13c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <osEE_scheduler_task_wrapper_restore>

00000140 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     140:	e6 2f       	mov	r30, r22
    mov r31, r23
     142:	f7 2f       	mov	r31, r23
    ld  r20, z+
     144:	41 91       	ld	r20, Z+
    ld  r21, z
     146:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     148:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     14a:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     14c:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <osEE_scheduler_task_wrapper_run>

00000150 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     150:	2f 92       	push	r2
     152:	3f 92       	push	r3
     154:	4f 92       	push	r4
     156:	5f 92       	push	r5
     158:	6f 92       	push	r6
     15a:	7f 92       	push	r7
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	e4 2f       	mov	r30, r20
     176:	f5 2f       	mov	r31, r21
     178:	41 90       	ld	r4, Z+
     17a:	50 80       	ld	r5, Z
     17c:	4f 92       	push	r4
     17e:	5f 92       	push	r5
     180:	e4 2f       	mov	r30, r20
     182:	f5 2f       	mov	r31, r21
     184:	4d b6       	in	r4, 0x3d	; 61
     186:	5e b6       	in	r5, 0x3e	; 62
     188:	41 92       	st	Z+, r4
     18a:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     18c:	0c 94 a0 00 	jmp	0x140	; 0x140 <osEE_hal_ready2stacked>

00000190 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     190:	e8 2f       	mov	r30, r24
    mov r31, r25
     192:	f9 2f       	mov	r31, r25
    ld  r20, z+
     194:	41 91       	ld	r20, Z+
    ld  r21, z
     196:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     198:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     19a:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     19c:	e6 2f       	mov	r30, r22
    mov r31, r23
     19e:	f7 2f       	mov	r31, r23

    ijmp
     1a0:	09 94       	ijmp
	...

000001a4 <idle_hook>:
     1a4:	8e eb       	ldi	r24, 0xBE	; 190
     1a6:	92 e0       	ldi	r25, 0x02	; 2
     1a8:	89 2b       	or	r24, r25
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <idle_hook+0xc>
     1ac:	0c 94 be 02 	jmp	0x57c	; 0x57c <_Z14serialEventRunv>
     1b0:	08 95       	ret

000001b2 <main>:
     1b2:	0e 94 46 02 	call	0x48c	; 0x48c <init>
     1b6:	26 e0       	ldi	r18, 0x06	; 6
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	52 ec       	ldi	r21, 0xC2	; 194
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	86 e7       	ldi	r24, 0x76	; 118
     1c2:	94 e0       	ldi	r25, 0x04	; 4
     1c4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN14HardwareSerial5beginEmh>
     1c8:	64 e6       	ldi	r22, 0x64	; 100
     1ca:	71 e0       	ldi	r23, 0x01	; 1
     1cc:	86 e7       	ldi	r24, 0x76	; 118
     1ce:	94 e0       	ldi	r25, 0x04	; 4
     1d0:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     1d4:	6d e9       	ldi	r22, 0x9D	; 157
     1d6:	71 e0       	ldi	r23, 0x01	; 1
     1d8:	86 e7       	ldi	r24, 0x76	; 118
     1da:	94 e0       	ldi	r25, 0x04	; 4
     1dc:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     1e0:	6e ea       	ldi	r22, 0xAE	; 174
     1e2:	71 e0       	ldi	r23, 0x01	; 1
     1e4:	86 e7       	ldi	r24, 0x76	; 118
     1e6:	94 e0       	ldi	r25, 0x04	; 4
     1e8:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     1ec:	6d e9       	ldi	r22, 0x9D	; 157
     1ee:	71 e0       	ldi	r23, 0x01	; 1
     1f0:	86 e7       	ldi	r24, 0x76	; 118
     1f2:	94 e0       	ldi	r25, 0x04	; 4
     1f4:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     1f8:	60 ea       	ldi	r22, 0xA0	; 160
     1fa:	71 e0       	ldi	r23, 0x01	; 1
     1fc:	86 e7       	ldi	r24, 0x76	; 118
     1fe:	94 e0       	ldi	r25, 0x04	; 4
     200:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN5Print7printlnEPKc>
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 6b 05 	call	0xad6	; 0xad6 <StartOS>
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	08 95       	ret

00000210 <StartupHook>:
     210:	cf 93       	push	r28
     212:	8a b1       	in	r24, 0x0a	; 10
     214:	88 68       	ori	r24, 0x88	; 136
     216:	8a b9       	out	0x0a, r24	; 10
     218:	8b b1       	in	r24, 0x0b	; 11
     21a:	87 77       	andi	r24, 0x77	; 119
     21c:	8b b9       	out	0x0b, r24	; 11
     21e:	68 e7       	ldi	r22, 0x78	; 120
     220:	72 e0       	ldi	r23, 0x02	; 2
     222:	86 e7       	ldi	r24, 0x76	; 118
     224:	94 e0       	ldi	r25, 0x04	; 4
     226:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     22a:	6d e9       	ldi	r22, 0x9D	; 157
     22c:	71 e0       	ldi	r23, 0x01	; 1
     22e:	86 e7       	ldi	r24, 0x76	; 118
     230:	94 e0       	ldi	r25, 0x04	; 4
     232:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     236:	68 ec       	ldi	r22, 0xC8	; 200
     238:	72 e0       	ldi	r23, 0x02	; 2
     23a:	86 e7       	ldi	r24, 0x76	; 118
     23c:	94 e0       	ldi	r25, 0x04	; 4
     23e:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     242:	6d e9       	ldi	r22, 0x9D	; 157
     244:	71 e0       	ldi	r23, 0x01	; 1
     246:	86 e7       	ldi	r24, 0x76	; 118
     248:	94 e0       	ldi	r25, 0x04	; 4
     24a:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     24e:	ca b1       	in	r28, 0x0a	; 10
     250:	62 eb       	ldi	r22, 0xB2	; 178
     252:	72 e0       	ldi	r23, 0x02	; 2
     254:	86 e7       	ldi	r24, 0x76	; 118
     256:	94 e0       	ldi	r25, 0x04	; 4
     258:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     25c:	6c 2f       	mov	r22, r28
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	42 e0       	ldi	r20, 0x02	; 2
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	86 e7       	ldi	r24, 0x76	; 118
     266:	94 e0       	ldi	r25, 0x04	; 4
     268:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5Print5printEii>
     26c:	cb b1       	in	r28, 0x0b	; 11
     26e:	6c eb       	ldi	r22, 0xBC	; 188
     270:	72 e0       	ldi	r23, 0x02	; 2
     272:	86 e7       	ldi	r24, 0x76	; 118
     274:	94 e0       	ldi	r25, 0x04	; 4
     276:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     27a:	6c 2f       	mov	r22, r28
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	42 e0       	ldi	r20, 0x02	; 2
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	86 e7       	ldi	r24, 0x76	; 118
     284:	94 e0       	ldi	r25, 0x04	; 4
     286:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5Print5printEii>
     28a:	86 e7       	ldi	r24, 0x76	; 118
     28c:	94 e0       	ldi	r25, 0x04	; 4
     28e:	cf 91       	pop	r28
     290:	0c 94 97 04 	jmp	0x92e	; 0x92e <_ZN5Print7printlnEv>

00000294 <_Z19header_serial_printPKcS0_>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	eb 01       	movw	r28, r22
     29a:	bc 01       	movw	r22, r24
     29c:	86 e7       	ldi	r24, 0x76	; 118
     29e:	94 e0       	ldi	r25, 0x04	; 4
     2a0:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     2a4:	6d e9       	ldi	r22, 0x9D	; 157
     2a6:	71 e0       	ldi	r23, 0x01	; 1
     2a8:	86 e7       	ldi	r24, 0x76	; 118
     2aa:	94 e0       	ldi	r25, 0x04	; 4
     2ac:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     2b0:	be 01       	movw	r22, r28
     2b2:	86 e7       	ldi	r24, 0x76	; 118
     2b4:	94 e0       	ldi	r25, 0x04	; 4
     2b6:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     2ba:	6d e9       	ldi	r22, 0x9D	; 157
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	86 e7       	ldi	r24, 0x76	; 118
     2c0:	94 e0       	ldi	r25, 0x04	; 4
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	0c 94 88 04 	jmp	0x910	; 0x910 <_ZN5Print5printEPKc>

000002ca <FuncTask0>:
     2ca:	0c 94 39 06 	jmp	0xc72	; 0xc72 <TerminateTask>

000002ce <FuncTask1>:
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	65 e3       	ldi	r22, 0x35	; 53
     2d4:	73 e0       	ldi	r23, 0x03	; 3
     2d6:	84 ed       	ldi	r24, 0xD4	; 212
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     2de:	6d e0       	ldi	r22, 0x0D	; 13
     2e0:	73 e0       	ldi	r23, 0x03	; 3
     2e2:	86 e7       	ldi	r24, 0x76	; 118
     2e4:	94 e0       	ldi	r25, 0x04	; 4
     2e6:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN5Print7printlnEPKc>
     2ea:	d8 e0       	ldi	r29, 0x08	; 8
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 16 07 	call	0xe2c	; 0xe2c <WaitEvent>
     2f4:	89 2b       	or	r24, r25
     2f6:	39 f5       	brne	.+78     	; 0x346 <FuncTask1+0x78>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 72 07 	call	0xee4	; 0xee4 <ClearEvent>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GetResource>
     306:	8b b1       	in	r24, 0x0b	; 11
     308:	8d 27       	eor	r24, r29
     30a:	8b b9       	out	0x0b, r24	; 11
     30c:	65 e3       	ldi	r22, 0x35	; 53
     30e:	73 e0       	ldi	r23, 0x03	; 3
     310:	84 ed       	ldi	r24, 0xD4	; 212
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     318:	cb b1       	in	r28, 0x0b	; 11
     31a:	6d eb       	ldi	r22, 0xBD	; 189
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	86 e7       	ldi	r24, 0x76	; 118
     320:	94 e0       	ldi	r25, 0x04	; 4
     322:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     326:	6c 2f       	mov	r22, r28
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	42 e0       	ldi	r20, 0x02	; 2
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	86 e7       	ldi	r24, 0x76	; 118
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5Print5printEii>
     336:	86 e7       	ldi	r24, 0x76	; 118
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN5Print7printlnEv>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ReleaseResource>
     344:	d3 cf       	rjmp	.-90     	; 0x2ec <FuncTask1+0x1e>
     346:	65 e3       	ldi	r22, 0x35	; 53
     348:	73 e0       	ldi	r23, 0x03	; 3
     34a:	84 ed       	ldi	r24, 0xD4	; 212
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     352:	6f e1       	ldi	r22, 0x1F	; 31
     354:	73 e0       	ldi	r23, 0x03	; 3
     356:	86 e7       	ldi	r24, 0x76	; 118
     358:	94 e0       	ldi	r25, 0x04	; 4
     35a:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN5Print7printlnEPKc>
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	0c 94 39 06 	jmp	0xc72	; 0xc72 <TerminateTask>

00000366 <FuncTask2>:
     366:	cf 93       	push	r28
     368:	6b e2       	ldi	r22, 0x2B	; 43
     36a:	73 e0       	ldi	r23, 0x03	; 3
     36c:	84 ed       	ldi	r24, 0xD4	; 212
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     374:	6d e0       	ldi	r22, 0x0D	; 13
     376:	73 e0       	ldi	r23, 0x03	; 3
     378:	86 e7       	ldi	r24, 0x76	; 118
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN5Print7printlnEPKc>
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 16 07 	call	0xe2c	; 0xe2c <WaitEvent>
     388:	89 2b       	or	r24, r25
     38a:	39 f5       	brne	.+78     	; 0x3da <FuncTask2+0x74>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 72 07 	call	0xee4	; 0xee4 <ClearEvent>
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GetResource>
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	80 58       	subi	r24, 0x80	; 128
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	6b e2       	ldi	r22, 0x2B	; 43
     3a2:	73 e0       	ldi	r23, 0x03	; 3
     3a4:	84 ed       	ldi	r24, 0xD4	; 212
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     3ac:	cb b1       	in	r28, 0x0b	; 11
     3ae:	6d eb       	ldi	r22, 0xBD	; 189
     3b0:	72 e0       	ldi	r23, 0x02	; 2
     3b2:	86 e7       	ldi	r24, 0x76	; 118
     3b4:	94 e0       	ldi	r25, 0x04	; 4
     3b6:	0e 94 88 04 	call	0x910	; 0x910 <_ZN5Print5printEPKc>
     3ba:	6c 2f       	mov	r22, r28
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	42 e0       	ldi	r20, 0x02	; 2
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	86 e7       	ldi	r24, 0x76	; 118
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5Print5printEii>
     3ca:	86 e7       	ldi	r24, 0x76	; 118
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN5Print7printlnEv>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ReleaseResource>
     3d8:	d3 cf       	rjmp	.-90     	; 0x380 <FuncTask2+0x1a>
     3da:	6b e2       	ldi	r22, 0x2B	; 43
     3dc:	73 e0       	ldi	r23, 0x03	; 3
     3de:	84 ed       	ldi	r24, 0xD4	; 212
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z19header_serial_printPKcS0_>
     3e6:	6f e1       	ldi	r22, 0x1F	; 31
     3e8:	73 e0       	ldi	r23, 0x03	; 3
     3ea:	86 e7       	ldi	r24, 0x76	; 118
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN5Print7printlnEPKc>
     3f2:	cf 91       	pop	r28
     3f4:	0c 94 39 06 	jmp	0xc72	; 0xc72 <TerminateTask>

000003f8 <__vector_16>:
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <timer0_millis>
     412:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <timer0_millis+0x1>
     416:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <timer0_millis+0x2>
     41a:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <timer0_millis+0x3>
     41e:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <timer0_fract>
     422:	23 e0       	ldi	r18, 0x03	; 3
     424:	23 0f       	add	r18, r19
     426:	2d 37       	cpi	r18, 0x7D	; 125
     428:	58 f5       	brcc	.+86     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	a1 1d       	adc	r26, r1
     42e:	b1 1d       	adc	r27, r1
     430:	20 93 6d 04 	sts	0x046D, r18	; 0x80046d <timer0_fract>
     434:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <timer0_millis>
     438:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <timer0_millis+0x1>
     43c:	a0 93 70 04 	sts	0x0470, r26	; 0x800470 <timer0_millis+0x2>
     440:	b0 93 71 04 	sts	0x0471, r27	; 0x800471 <timer0_millis+0x3>
     444:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <timer0_overflow_count>
     448:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <timer0_overflow_count+0x1>
     44c:	a0 91 74 04 	lds	r26, 0x0474	; 0x800474 <timer0_overflow_count+0x2>
     450:	b0 91 75 04 	lds	r27, 0x0475	; 0x800475 <timer0_overflow_count+0x3>
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	a1 1d       	adc	r26, r1
     458:	b1 1d       	adc	r27, r1
     45a:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <timer0_overflow_count>
     45e:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <timer0_overflow_count+0x1>
     462:	a0 93 74 04 	sts	0x0474, r26	; 0x800474 <timer0_overflow_count+0x2>
     466:	b0 93 75 04 	sts	0x0475, r27	; 0x800475 <timer0_overflow_count+0x3>
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti
     480:	26 e8       	ldi	r18, 0x86	; 134
     482:	23 0f       	add	r18, r19
     484:	02 96       	adiw	r24, 0x02	; 2
     486:	a1 1d       	adc	r26, r1
     488:	b1 1d       	adc	r27, r1
     48a:	d2 cf       	rjmp	.-92     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

0000048c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     48c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     48e:	84 b5       	in	r24, 0x24	; 36
     490:	82 60       	ori	r24, 0x02	; 2
     492:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     494:	84 b5       	in	r24, 0x24	; 36
     496:	81 60       	ori	r24, 0x01	; 1
     498:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     49a:	85 b5       	in	r24, 0x25	; 37
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     4a0:	85 b5       	in	r24, 0x25	; 37
     4a2:	81 60       	ori	r24, 0x01	; 1
     4a4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     4a6:	ee e6       	ldi	r30, 0x6E	; 110
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	81 60       	ori	r24, 0x01	; 1
     4ae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     4b0:	e1 e8       	ldi	r30, 0x81	; 129
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     4b6:	80 81       	ld	r24, Z
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     4bc:	80 81       	ld	r24, Z
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     4c2:	e0 e8       	ldi	r30, 0x80	; 128
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	81 60       	ori	r24, 0x01	; 1
     4ca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     4cc:	e1 eb       	ldi	r30, 0xB1	; 177
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	84 60       	ori	r24, 0x04	; 4
     4d4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     4d6:	e0 eb       	ldi	r30, 0xB0	; 176
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     4e0:	ea e7       	ldi	r30, 0x7A	; 122
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	84 60       	ori	r24, 0x04	; 4
     4e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     4ea:	80 81       	ld	r24, Z
     4ec:	82 60       	ori	r24, 0x02	; 2
     4ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     4f0:	80 81       	ld	r24, Z
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     4f6:	80 81       	ld	r24, Z
     4f8:	80 68       	ori	r24, 0x80	; 128
     4fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     4fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#endif
}
     500:	08 95       	ret

00000502 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     502:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     504:	91 8d       	ldd	r25, Z+25	; 0x19
     506:	22 8d       	ldd	r18, Z+26	; 0x1a
     508:	89 2f       	mov	r24, r25
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	80 5c       	subi	r24, 0xC0	; 192
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
     510:	82 1b       	sub	r24, r18
     512:	91 09       	sbc	r25, r1
}
     514:	8f 73       	andi	r24, 0x3F	; 63
     516:	99 27       	eor	r25, r25
     518:	08 95       	ret

0000051a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     51a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     51c:	91 8d       	ldd	r25, Z+25	; 0x19
     51e:	82 8d       	ldd	r24, Z+26	; 0x1a
     520:	98 17       	cp	r25, r24
     522:	31 f0       	breq	.+12     	; 0x530 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     524:	82 8d       	ldd	r24, Z+26	; 0x1a
     526:	e8 0f       	add	r30, r24
     528:	f1 1d       	adc	r31, r1
     52a:	85 8d       	ldd	r24, Z+29	; 0x1d
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     534:	08 95       	ret

00000536 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     536:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     538:	91 8d       	ldd	r25, Z+25	; 0x19
     53a:	82 8d       	ldd	r24, Z+26	; 0x1a
     53c:	98 17       	cp	r25, r24
     53e:	61 f0       	breq	.+24     	; 0x558 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     540:	a2 8d       	ldd	r26, Z+26	; 0x1a
     542:	ae 0f       	add	r26, r30
     544:	bf 2f       	mov	r27, r31
     546:	b1 1d       	adc	r27, r1
     548:	5d 96       	adiw	r26, 0x1d	; 29
     54a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     54c:	92 8d       	ldd	r25, Z+26	; 0x1a
     54e:	9f 5f       	subi	r25, 0xFF	; 255
     550:	9f 73       	andi	r25, 0x3F	; 63
     552:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     55c:	08 95       	ret

0000055e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     55e:	fc 01       	movw	r30, r24
     560:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     562:	44 8d       	ldd	r20, Z+28	; 0x1c
     564:	25 2f       	mov	r18, r21
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	84 2f       	mov	r24, r20
     56a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     56c:	82 1b       	sub	r24, r18
     56e:	93 0b       	sbc	r25, r19
     570:	54 17       	cp	r21, r20
     572:	10 f0       	brcs	.+4      	; 0x578 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     574:	cf 96       	adiw	r24, 0x3f	; 63
     576:	08 95       	ret
  return tail - head - 1;
     578:	01 97       	sbiw	r24, 0x01	; 1
}
     57a:	08 95       	ret

0000057c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     57c:	85 e1       	ldi	r24, 0x15	; 21
     57e:	94 e0       	ldi	r25, 0x04	; 4
     580:	89 2b       	or	r24, r25
     582:	49 f0       	breq	.+18     	; 0x596 <_Z14serialEventRunv+0x1a>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	29 f0       	breq	.+10     	; 0x596 <_Z14serialEventRunv+0x1a>
     58c:	0e 94 15 04 	call	0x82a	; 0x82a <_Z17Serial0_availablev>
     590:	81 11       	cpse	r24, r1
     592:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     596:	08 95       	ret

00000598 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     598:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     59a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     59c:	a8 0f       	add	r26, r24
     59e:	b9 2f       	mov	r27, r25
     5a0:	b1 1d       	adc	r27, r1
     5a2:	a3 5a       	subi	r26, 0xA3	; 163
     5a4:	bf 4f       	sbci	r27, 0xFF	; 255
     5a6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5a8:	84 8d       	ldd	r24, Z+28	; 0x1c
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	8f 73       	andi	r24, 0x3F	; 63
     5b0:	99 27       	eor	r25, r25
     5b2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     5b4:	a6 89       	ldd	r26, Z+22	; 0x16
     5b6:	b7 89       	ldd	r27, Z+23	; 0x17
     5b8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     5ba:	a0 89       	ldd	r26, Z+16	; 0x10
     5bc:	b1 89       	ldd	r27, Z+17	; 0x11
     5be:	8c 91       	ld	r24, X
     5c0:	83 70       	andi	r24, 0x03	; 3
     5c2:	80 64       	ori	r24, 0x40	; 64
     5c4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5c6:	93 8d       	ldd	r25, Z+27	; 0x1b
     5c8:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ca:	98 13       	cpse	r25, r24
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     5ce:	02 88       	ldd	r0, Z+18	; 0x12
     5d0:	f3 89       	ldd	r31, Z+19	; 0x13
     5d2:	e0 2d       	mov	r30, r0
     5d4:	80 81       	ld	r24, Z
     5d6:	8f 7d       	andi	r24, 0xDF	; 223
     5d8:	80 83       	st	Z, r24
  }
}
     5da:	08 95       	ret

000005dc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     5e2:	88 8d       	ldd	r24, Y+24	; 0x18
     5e4:	88 23       	and	r24, r24
     5e6:	b9 f0       	breq	.+46     	; 0x616 <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     5e8:	aa 89       	ldd	r26, Y+18	; 0x12
     5ea:	bb 89       	ldd	r27, Y+19	; 0x13
     5ec:	e8 89       	ldd	r30, Y+16	; 0x10
     5ee:	f9 89       	ldd	r31, Y+17	; 0x11
     5f0:	8c 91       	ld	r24, X
     5f2:	85 fd       	sbrc	r24, 5
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <_ZN14HardwareSerial5flushEv+0x20>
     5f6:	80 81       	ld	r24, Z
     5f8:	86 fd       	sbrc	r24, 6
     5fa:	0d c0       	rjmp	.+26     	; 0x616 <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	07 fc       	sbrc	r0, 7
     600:	f7 cf       	rjmp	.-18     	; 0x5f0 <_ZN14HardwareSerial5flushEv+0x14>
     602:	8c 91       	ld	r24, X
     604:	85 ff       	sbrs	r24, 5
     606:	f2 cf       	rjmp	.-28     	; 0x5ec <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     608:	80 81       	ld	r24, Z
     60a:	85 ff       	sbrs	r24, 5
     60c:	ed cf       	rjmp	.-38     	; 0x5e8 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     614:	e9 cf       	rjmp	.-46     	; 0x5e8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
  _written = true;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     62e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     630:	8c 8d       	ldd	r24, Y+28	; 0x1c
     632:	98 13       	cpse	r25, r24
     634:	1a c0       	rjmp	.+52     	; 0x66a <_ZN14HardwareSerial5writeEh+0x4e>
     636:	e8 89       	ldd	r30, Y+16	; 0x10
     638:	f9 89       	ldd	r31, Y+17	; 0x11
     63a:	80 81       	ld	r24, Z
     63c:	85 ff       	sbrs	r24, 5
     63e:	15 c0       	rjmp	.+42     	; 0x66a <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     640:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     642:	f8 94       	cli
      *_udr = c;
     644:	ee 89       	ldd	r30, Y+22	; 0x16
     646:	ff 89       	ldd	r31, Y+23	; 0x17
     648:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     64a:	e8 89       	ldd	r30, Y+16	; 0x10
     64c:	f9 89       	ldd	r31, Y+17	; 0x11
     64e:	80 81       	ld	r24, Z
     650:	83 70       	andi	r24, 0x03	; 3
     652:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     654:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     656:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	08 95       	ret
     66a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     66c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	0f 5f       	subi	r16, 0xFF	; 255
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	0f 73       	andi	r16, 0x3F	; 63
     676:	11 27       	eor	r17, r17
     678:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     67a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     67c:	8e 11       	cpse	r24, r14
     67e:	0c c0       	rjmp	.+24     	; 0x698 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	07 fc       	sbrc	r0, 7
     684:	fa cf       	rjmp	.-12     	; 0x67a <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     686:	e8 89       	ldd	r30, Y+16	; 0x10
     688:	f9 89       	ldd	r31, Y+17	; 0x11
     68a:	80 81       	ld	r24, Z
     68c:	85 ff       	sbrs	r24, 5
     68e:	f5 cf       	rjmp	.-22     	; 0x67a <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
     690:	ce 01       	movw	r24, r28
     692:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     696:	f1 cf       	rjmp	.-30     	; 0x67a <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     698:	eb 8d       	ldd	r30, Y+27	; 0x1b
     69a:	ec 0f       	add	r30, r28
     69c:	fd 2f       	mov	r31, r29
     69e:	f1 1d       	adc	r31, r1
     6a0:	e3 5a       	subi	r30, 0xA3	; 163
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     6a6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a8:	f8 94       	cli
    _tx_buffer_head = i;
     6aa:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     6ac:	ea 89       	ldd	r30, Y+18	; 0x12
     6ae:	fb 89       	ldd	r31, Y+19	; 0x13
     6b0:	80 81       	ld	r24, Z
     6b2:	80 62       	ori	r24, 0x20	; 32
     6b4:	cf cf       	rjmp	.-98     	; 0x654 <_ZN14HardwareSerial5writeEh+0x38>

000006b6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	6a 01       	movw	r12, r20
     6c8:	7b 01       	movw	r14, r22
     6ca:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     6cc:	e8 89       	ldd	r30, Y+16	; 0x10
     6ce:	f9 89       	ldd	r31, Y+17	; 0x11
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6d4:	c1 14       	cp	r12, r1
     6d6:	81 ee       	ldi	r24, 0xE1	; 225
     6d8:	d8 06       	cpc	r13, r24
     6da:	e1 04       	cpc	r14, r1
     6dc:	f1 04       	cpc	r15, r1
     6de:	a1 f0       	breq	.+40     	; 0x708 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	79 e0       	ldi	r23, 0x09	; 9
     6e4:	8d e3       	ldi	r24, 0x3D	; 61
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a7 01       	movw	r20, r14
     6ea:	96 01       	movw	r18, r12
     6ec:	0e 94 be 0c 	call	0x197c	; 0x197c <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
     6f8:	56 95       	lsr	r21
     6fa:	47 95       	ror	r20
     6fc:	37 95       	ror	r19
     6fe:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     700:	21 15       	cp	r18, r1
     702:	80 e1       	ldi	r24, 0x10	; 16
     704:	38 07       	cpc	r19, r24
     706:	98 f0       	brcs	.+38     	; 0x72e <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     708:	e8 89       	ldd	r30, Y+16	; 0x10
     70a:	f9 89       	ldd	r31, Y+17	; 0x11
     70c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     70e:	60 e8       	ldi	r22, 0x80	; 128
     710:	74 e8       	ldi	r23, 0x84	; 132
     712:	8e e1       	ldi	r24, 0x1E	; 30
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a7 01       	movw	r20, r14
     718:	96 01       	movw	r18, r12
     71a:	0e 94 be 0c 	call	0x197c	; 0x197c <__udivmodsi4>
     71e:	21 50       	subi	r18, 0x01	; 1
     720:	31 09       	sbc	r19, r1
     722:	41 09       	sbc	r20, r1
     724:	51 09       	sbc	r21, r1
     726:	56 95       	lsr	r21
     728:	47 95       	ror	r20
     72a:	37 95       	ror	r19
     72c:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     72e:	ec 85       	ldd	r30, Y+12	; 0x0c
     730:	fd 85       	ldd	r31, Y+13	; 0x0d
     732:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     734:	ee 85       	ldd	r30, Y+14	; 0x0e
     736:	ff 85       	ldd	r31, Y+15	; 0x0f
     738:	20 83       	st	Z, r18

  _written = false;
     73a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     73c:	ec 89       	ldd	r30, Y+20	; 0x14
     73e:	fd 89       	ldd	r31, Y+21	; 0x15
     740:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     742:	ea 89       	ldd	r30, Y+18	; 0x12
     744:	fb 89       	ldd	r31, Y+19	; 0x13
     746:	80 81       	ld	r24, Z
     748:	80 61       	ori	r24, 0x10	; 16
     74a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     74c:	ea 89       	ldd	r30, Y+18	; 0x12
     74e:	fb 89       	ldd	r31, Y+19	; 0x13
     750:	80 81       	ld	r24, Z
     752:	88 60       	ori	r24, 0x08	; 8
     754:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     756:	ea 89       	ldd	r30, Y+18	; 0x12
     758:	fb 89       	ldd	r31, Y+19	; 0x13
     75a:	80 81       	ld	r24, Z
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     760:	ea 89       	ldd	r30, Y+18	; 0x12
     762:	fb 89       	ldd	r31, Y+19	; 0x13
     764:	80 81       	ld	r24, Z
     766:	8f 7d       	andi	r24, 0xDF	; 223
     768:	80 83       	st	Z, r24
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     78e:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <Serial+0x10>
     792:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <Serial+0x11>
     796:	80 81       	ld	r24, Z
     798:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <Serial+0x16>
     79c:	f0 91 8d 04 	lds	r31, 0x048D	; 0x80048d <Serial+0x17>
     7a0:	82 fd       	sbrc	r24, 2
     7a2:	1b c0       	rjmp	.+54     	; 0x7da <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     7a4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     7a6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <Serial+0x19>
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     7ae:	20 91 90 04 	lds	r18, 0x0490	; 0x800490 <Serial+0x1a>
     7b2:	82 17       	cp	r24, r18
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
     7b6:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <Serial+0x19>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	ea 58       	subi	r30, 0x8A	; 138
     7be:	fb 4f       	sbci	r31, 0xFB	; 251
     7c0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     7c2:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <Serial+0x19>
    Serial._rx_complete_irq();
  }
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     7da:	80 81       	ld	r24, Z
     7dc:	f4 cf       	rjmp	.-24     	; 0x7c6 <__vector_18+0x4c>

000007de <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     800:	86 e7       	ldi	r24, 0x76	; 118
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     82a:	86 e7       	ldi	r24, 0x76	; 118
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	0e 94 81 02 	call	0x502	; 0x502 <_ZN14HardwareSerial9availableEv>
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	89 2b       	or	r24, r25
     836:	09 f4       	brne	.+2      	; 0x83a <_Z17Serial0_availablev+0x10>
     838:	20 e0       	ldi	r18, 0x00	; 0
}
     83a:	82 2f       	mov	r24, r18
     83c:	08 95       	ret

0000083e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     83e:	e6 e7       	ldi	r30, 0x76	; 118
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	13 82       	std	Z+3, r1	; 0x03
     844:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     846:	88 ee       	ldi	r24, 0xE8	; 232
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	84 83       	std	Z+4, r24	; 0x04
     850:	95 83       	std	Z+5, r25	; 0x05
     852:	a6 83       	std	Z+6, r26	; 0x06
     854:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     856:	83 e4       	ldi	r24, 0x43	; 67
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
     85e:	85 ec       	ldi	r24, 0xC5	; 197
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	95 87       	std	Z+13, r25	; 0x0d
     864:	84 87       	std	Z+12, r24	; 0x0c
     866:	84 ec       	ldi	r24, 0xC4	; 196
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	97 87       	std	Z+15, r25	; 0x0f
     86c:	86 87       	std	Z+14, r24	; 0x0e
     86e:	80 ec       	ldi	r24, 0xC0	; 192
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	91 8b       	std	Z+17, r25	; 0x11
     874:	80 8b       	std	Z+16, r24	; 0x10
     876:	81 ec       	ldi	r24, 0xC1	; 193
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	93 8b       	std	Z+19, r25	; 0x13
     87c:	82 8b       	std	Z+18, r24	; 0x12
     87e:	82 ec       	ldi	r24, 0xC2	; 194
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	95 8b       	std	Z+21, r25	; 0x15
     884:	84 8b       	std	Z+20, r24	; 0x14
     886:	86 ec       	ldi	r24, 0xC6	; 198
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	97 8b       	std	Z+23, r25	; 0x17
     88c:	86 8b       	std	Z+22, r24	; 0x16
     88e:	11 8e       	std	Z+25, r1	; 0x19
     890:	12 8e       	std	Z+26, r1	; 0x1a
     892:	13 8e       	std	Z+27, r1	; 0x1b
     894:	14 8e       	std	Z+28, r1	; 0x1c
     896:	08 95       	ret

00000898 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	6c 01       	movw	r12, r24
     8ae:	7b 01       	movw	r14, r22
     8b0:	8b 01       	movw	r16, r22
     8b2:	04 0f       	add	r16, r20
     8b4:	15 1f       	adc	r17, r21
     8b6:	eb 01       	movw	r28, r22
     8b8:	5e 01       	movw	r10, r28
     8ba:	ae 18       	sub	r10, r14
     8bc:	bf 08       	sbc	r11, r15
     8be:	c0 17       	cp	r28, r16
     8c0:	d1 07       	cpc	r29, r17
     8c2:	59 f0       	breq	.+22     	; 0x8da <_ZN5Print5writeEPKhj+0x42>
     8c4:	69 91       	ld	r22, Y+
     8c6:	d6 01       	movw	r26, r12
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	01 90       	ld	r0, Z+
     8ce:	f0 81       	ld	r31, Z
     8d0:	e0 2d       	mov	r30, r0
     8d2:	c6 01       	movw	r24, r12
     8d4:	09 95       	icall
     8d6:	89 2b       	or	r24, r25
     8d8:	79 f7       	brne	.-34     	; 0x8b8 <_ZN5Print5writeEPKhj+0x20>
     8da:	c5 01       	movw	r24, r10
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	08 95       	ret

000008f2 <_ZN5Print5writeEPKc.part.2>:
     8f2:	fb 01       	movw	r30, r22
     8f4:	01 90       	ld	r0, Z+
     8f6:	00 20       	and	r0, r0
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <_ZN5Print5writeEPKc.part.2+0x2>
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	af 01       	movw	r20, r30
     8fe:	46 1b       	sub	r20, r22
     900:	57 0b       	sbc	r21, r23
     902:	dc 01       	movw	r26, r24
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	02 80       	ldd	r0, Z+2	; 0x02
     90a:	f3 81       	ldd	r31, Z+3	; 0x03
     90c:	e0 2d       	mov	r30, r0
     90e:	09 94       	ijmp

00000910 <_ZN5Print5printEPKc>:
     910:	61 15       	cp	r22, r1
     912:	71 05       	cpc	r23, r1
     914:	11 f0       	breq	.+4      	; 0x91a <_ZN5Print5printEPKc+0xa>
     916:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_ZN5Print5writeEPKc.part.2>
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	08 95       	ret

00000920 <_ZN5Print5printEc>:
     920:	dc 01       	movw	r26, r24
     922:	ed 91       	ld	r30, X+
     924:	fc 91       	ld	r31, X
     926:	01 90       	ld	r0, Z+
     928:	f0 81       	ld	r31, Z
     92a:	e0 2d       	mov	r30, r0
     92c:	09 94       	ijmp

0000092e <_ZN5Print7printlnEv>:
     92e:	61 e5       	ldi	r22, 0x51	; 81
     930:	73 e0       	ldi	r23, 0x03	; 3
     932:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_ZN5Print5writeEPKc.part.2>

00000936 <_ZN5Print7printlnEPKc>:
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	8c 01       	movw	r16, r24
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	c0 e0       	ldi	r28, 0x00	; 0
     944:	61 15       	cp	r22, r1
     946:	71 05       	cpc	r23, r1
     948:	19 f0       	breq	.+6      	; 0x950 <_ZN5Print7printlnEPKc+0x1a>
     94a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN5Print5writeEPKc.part.2>
     94e:	ec 01       	movw	r28, r24
     950:	c8 01       	movw	r24, r16
     952:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN5Print7printlnEv>
     956:	8c 0f       	add	r24, r28
     958:	9d 1f       	adc	r25, r29
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	a1 97       	sbiw	r28, 0x21	; 33
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	7c 01       	movw	r14, r24
     98a:	fa 01       	movw	r30, r20
     98c:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     98e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     990:	22 30       	cpi	r18, 0x02	; 2
     992:	08 f4       	brcc	.+2      	; 0x996 <_ZN5Print11printNumberEmh+0x32>
     994:	2a e0       	ldi	r18, 0x0A	; 10
     996:	8e 01       	movw	r16, r28
     998:	0f 5d       	subi	r16, 0xDF	; 223
     99a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     99c:	82 2e       	mov	r8, r18
     99e:	91 2c       	mov	r9, r1
     9a0:	b1 2c       	mov	r11, r1
     9a2:	a1 2c       	mov	r10, r1
     9a4:	bf 01       	movw	r22, r30
     9a6:	a5 01       	movw	r20, r10
     9a8:	94 01       	movw	r18, r8
     9aa:	0e 94 be 0c 	call	0x197c	; 0x197c <__udivmodsi4>
    n /= base;
     9ae:	f9 01       	movw	r30, r18
     9b0:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     9b2:	6a 30       	cpi	r22, 0x0A	; 10
     9b4:	0c f5       	brge	.+66     	; 0x9f8 <_ZN5Print11printNumberEmh+0x94>
     9b6:	60 5d       	subi	r22, 0xD0	; 208
     9b8:	d8 01       	movw	r26, r16
     9ba:	6e 93       	st	-X, r22
     9bc:	8d 01       	movw	r16, r26
  } while(n);
     9be:	23 2b       	or	r18, r19
     9c0:	24 2b       	or	r18, r20
     9c2:	25 2b       	or	r18, r21
     9c4:	79 f7       	brne	.-34     	; 0x9a4 <_ZN5Print11printNumberEmh+0x40>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	10 97       	sbiw	r26, 0x00	; 0
     9cc:	21 f0       	breq	.+8      	; 0x9d6 <_ZN5Print11printNumberEmh+0x72>
     9ce:	bd 01       	movw	r22, r26
     9d0:	c7 01       	movw	r24, r14
     9d2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN5Print5writeEPKc.part.2>

  return write(str);
}
     9d6:	a1 96       	adiw	r28, 0x21	; 33
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	08 95       	ret

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     9f8:	69 5c       	subi	r22, 0xC9	; 201
     9fa:	de cf       	rjmp	.-68     	; 0x9b8 <_ZN5Print11printNumberEmh+0x54>

000009fc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
  if (base == 0) {
     a0c:	21 15       	cp	r18, r1
     a0e:	31 05       	cpc	r19, r1
     a10:	81 f4       	brne	.+32     	; 0xa32 <_ZN5Print5printEli+0x36>
    return write(n);
     a12:	dc 01       	movw	r26, r24
     a14:	ed 91       	ld	r30, X+
     a16:	fc 91       	ld	r31, X
     a18:	01 90       	ld	r0, Z+
     a1a:	f0 81       	ld	r31, Z
     a1c:	e0 2d       	mov	r30, r0
     a1e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     a30:	09 94       	ijmp
  } else if (base == 10) {
     a32:	2a 30       	cpi	r18, 0x0A	; 10
     a34:	31 05       	cpc	r19, r1
     a36:	01 f5       	brne	.+64     	; 0xa78 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     a38:	2a e0       	ldi	r18, 0x0A	; 10
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     a3a:	77 ff       	sbrs	r23, 7
     a3c:	1d c0       	rjmp	.+58     	; 0xa78 <_ZN5Print5printEli+0x7c>
     a3e:	6a 01       	movw	r12, r20
     a40:	7b 01       	movw	r14, r22
     a42:	ec 01       	movw	r28, r24
      int t = print('-');
     a44:	6d e2       	ldi	r22, 0x2D	; 45
     a46:	0e 94 90 04 	call	0x920	; 0x920 <_ZN5Print5printEc>
     a4a:	8c 01       	movw	r16, r24
      n = -n;
     a4c:	44 27       	eor	r20, r20
     a4e:	55 27       	eor	r21, r21
     a50:	ba 01       	movw	r22, r20
     a52:	4c 19       	sub	r20, r12
     a54:	5d 09       	sbc	r21, r13
     a56:	6e 09       	sbc	r22, r14
     a58:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     a5a:	2a e0       	ldi	r18, 0x0A	; 10
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN5Print11printNumberEmh>
     a62:	80 0f       	add	r24, r16
     a64:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	08 95       	ret
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     a88:	0c 94 b2 04 	jmp	0x964	; 0x964 <_ZN5Print11printNumberEmh>

00000a8c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     a8c:	9a 01       	movw	r18, r20
  return print((long) n, base);
     a8e:	ab 01       	movw	r20, r22
     a90:	77 0f       	add	r23, r23
     a92:	66 0b       	sbc	r22, r22
     a94:	77 0b       	sbc	r23, r23
     a96:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_ZN5Print5printEli>

00000a9a <osEE_avr8_system_timer_init>:
#define OSEE_AVR8_TIMER0_COMPA  (1U)

#if	(defined(OSEE_SYSTEM_TIMER_DEVICE))
#if	(OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)
void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
     a9a:	68 ee       	ldi	r22, 0xE8	; 232
     a9c:	73 e0       	ldi	r23, 0x03	; 3
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <OsEE_atmega_startTimer1>

00000aa6 <osEE_avr8_system_timer_handler>:
	 */
#endif	/* OSEE_SYSTEM_TIMER_DEVICE */

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
     aa6:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <osEE_cdb_var+0x6>
     aaa:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <osEE_cdb_var+0x7>
     aae:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <osEE_counter_increment>

00000ab2 <osEE_check_disableint>:
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
     ab2:	fc 01       	movw	r30, r24
     ab4:	87 85       	ldd	r24, Z+15	; 0x0f
     ab6:	81 11       	cpse	r24, r1
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <osEE_check_disableint+0x1e>
     aba:	80 89       	ldd	r24, Z+16	; 0x10
     abc:	81 11       	cpse	r24, r1
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <osEE_check_disableint+0x1e>
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	81 89       	ldd	r24, Z+17	; 0x11
     ac6:	81 11       	cpse	r24, r1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <osEE_check_disableint+0x1a>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	82 2f       	mov	r24, r18
     ace:	08 95       	ret
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	08 95       	ret

00000ad6 <StartOS>:
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <StartOS+0x22>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     b00:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
     b04:	9f b7       	in	r25, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	d8 01       	movw	r26, r16
     b0a:	18 96       	adiw	r26, 0x08	; 8
     b0c:	2d 91       	ld	r18, X+
     b0e:	3c 91       	ld	r19, X
     b10:	23 2b       	or	r18, r19
     b12:	b1 f0       	breq	.+44     	; 0xb40 <StartOS+0x6a>
     b14:	9f bf       	out	0x3f, r25	; 63
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	08 95       	ret
     b40:	e8 2e       	mov	r14, r24
     b42:	86 e3       	ldi	r24, 0x36	; 54
     b44:	9c e0       	ldi	r25, 0x0C	; 12
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <osEE_avr8_system_timer_init>
     b4e:	c0 90 c9 01 	lds	r12, 0x01C9	; 0x8001c9 <osEE_cdb_var+0x4>
     b52:	d0 90 ca 01 	lds	r13, 0x01CA	; 0x8001ca <osEE_cdb_var+0x5>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	f8 01       	movw	r30, r16
     b5c:	91 87       	std	Z+9, r25	; 0x09
     b5e:	80 87       	std	Z+8, r24	; 0x08
     b60:	e2 86       	std	Z+10, r14	; 0x0a
     b62:	0e 94 08 01 	call	0x210	; 0x210 <StartupHook>
     b66:	60 90 d1 01 	lds	r6, 0x01D1	; 0x8001d1 <osEE_cdb_var+0xc>
     b6a:	70 90 d2 01 	lds	r7, 0x01D2	; 0x8001d2 <osEE_cdb_var+0xd>
     b6e:	f4 e0       	ldi	r31, 0x04	; 4
     b70:	ef 9e       	mul	r14, r31
     b72:	70 01       	movw	r14, r0
     b74:	11 24       	eor	r1, r1
     b76:	6e 0c       	add	r6, r14
     b78:	7f 1c       	adc	r7, r15
     b7a:	d3 01       	movw	r26, r6
     b7c:	12 96       	adiw	r26, 0x02	; 2
     b7e:	8d 90       	ld	r8, X+
     b80:	9c 90       	ld	r9, X
     b82:	b1 2c       	mov	r11, r1
     b84:	a1 2c       	mov	r10, r1
     b86:	46 e0       	ldi	r20, 0x06	; 6
     b88:	54 2e       	mov	r5, r20
     b8a:	a8 14       	cp	r10, r8
     b8c:	b9 04       	cpc	r11, r9
     b8e:	91 f5       	brne	.+100    	; 0xbf4 <StartOS+0x11e>
     b90:	40 90 cd 01 	lds	r4, 0x01CD	; 0x8001cd <osEE_cdb_var+0x8>
     b94:	50 90 ce 01 	lds	r5, 0x01CE	; 0x8001ce <osEE_cdb_var+0x9>
     b98:	58 01       	movw	r10, r16
     b9a:	e2 e0       	ldi	r30, 0x02	; 2
     b9c:	ae 0e       	add	r10, r30
     b9e:	b1 1c       	adc	r11, r1
     ba0:	4e 0c       	add	r4, r14
     ba2:	5f 1c       	adc	r5, r15
     ba4:	d2 01       	movw	r26, r4
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	6d 90       	ld	r6, X+
     baa:	7c 90       	ld	r7, X
     bac:	f1 2c       	mov	r15, r1
     bae:	e1 2c       	mov	r14, r1
     bb0:	88 24       	eor	r8, r8
     bb2:	83 94       	inc	r8
     bb4:	91 2c       	mov	r9, r1
     bb6:	e6 14       	cp	r14, r6
     bb8:	f7 04       	cpc	r15, r7
     bba:	b1 f5       	brne	.+108    	; 0xc28 <StartOS+0x152>
     bbc:	f8 01       	movw	r30, r16
     bbe:	80 85       	ldd	r24, Z+8	; 0x08
     bc0:	91 85       	ldd	r25, Z+9	; 0x09
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	21 f4       	brne	.+8      	; 0xbce <StartOS+0xf8>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 87       	std	Z+9, r25	; 0x09
     bcc:	80 87       	std	Z+8, r24	; 0x08
     bce:	d8 01       	movw	r26, r16
     bd0:	18 96       	adiw	r26, 0x08	; 8
     bd2:	8d 91       	ld	r24, X+
     bd4:	9c 91       	ld	r25, X
     bd6:	02 97       	sbiw	r24, 0x02	; 2
     bd8:	51 f4       	brne	.+20     	; 0xbee <StartOS+0x118>
     bda:	f6 01       	movw	r30, r12
     bdc:	62 81       	ldd	r22, Z+2	; 0x02
     bde:	73 81       	ldd	r23, Z+3	; 0x03
     be0:	ab 01       	movw	r20, r22
     be2:	c6 01       	movw	r24, r12
     be4:	0e 94 a8 00 	call	0x150	; 0x150 <osEE_hal_save_ctx_and_ready2stacked>
     be8:	c6 01       	movw	r24, r12
     bea:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <osEE_task_end>
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	93 cf       	rjmp	.-218    	; 0xb1a <StartOS+0x44>
     bf4:	d3 01       	movw	r26, r6
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	5a 9c       	mul	r5, r10
     bfc:	c0 01       	movw	r24, r0
     bfe:	5b 9c       	mul	r5, r11
     c00:	90 0d       	add	r25, r0
     c02:	11 24       	eor	r1, r1
     c04:	e8 0f       	add	r30, r24
     c06:	f9 1f       	adc	r31, r25
     c08:	a0 81       	ld	r26, Z
     c0a:	b1 81       	ldd	r27, Z+1	; 0x01
     c0c:	24 81       	ldd	r18, Z+4	; 0x04
     c0e:	35 81       	ldd	r19, Z+5	; 0x05
     c10:	42 81       	ldd	r20, Z+2	; 0x02
     c12:	53 81       	ldd	r21, Z+3	; 0x03
     c14:	bd 01       	movw	r22, r26
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	8d 91       	ld	r24, X+
     c1a:	9c 91       	ld	r25, X
     c1c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <osEE_alarm_set_rel>
     c20:	bf ef       	ldi	r27, 0xFF	; 255
     c22:	ab 1a       	sub	r10, r27
     c24:	bb 0a       	sbc	r11, r27
     c26:	b1 cf       	rjmp	.-158    	; 0xb8a <StartOS+0xb4>
     c28:	d2 01       	movw	r26, r4
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	c7 01       	movw	r24, r14
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	e8 0f       	add	r30, r24
     c36:	f9 1f       	adc	r31, r25
     c38:	40 81       	ld	r20, Z
     c3a:	51 81       	ldd	r21, Z+1	; 0x01
     c3c:	da 01       	movw	r26, r20
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	ed 91       	ld	r30, X+
     c42:	fc 91       	ld	r31, X
     c44:	80 81       	ld	r24, Z
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 83       	st	Z, r24
     c4a:	93 82       	std	Z+3, r9	; 0x03
     c4c:	82 82       	std	Z+2, r8	; 0x02
     c4e:	f8 01       	movw	r30, r16
     c50:	64 81       	ldd	r22, Z+4	; 0x04
     c52:	75 81       	ldd	r23, Z+5	; 0x05
     c54:	db 01       	movw	r26, r22
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	95 83       	std	Z+5, r25	; 0x05
     c5e:	84 83       	std	Z+4, r24	; 0x04
     c60:	1d 92       	st	X+, r1
     c62:	1c 92       	st	X, r1
     c64:	c5 01       	movw	r24, r10
     c66:	0e 94 b5 08 	call	0x116a	; 0x116a <osEE_scheduler_rq_insert>
     c6a:	bf ef       	ldi	r27, 0xFF	; 255
     c6c:	eb 1a       	sub	r14, r27
     c6e:	fb 0a       	sbc	r15, r27
     c70:	a2 cf       	rjmp	.-188    	; 0xbb6 <StartOS+0xe0>

00000c72 <TerminateTask>:
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     c7a:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
     c7e:	a0 81       	ld	r26, Z
     c80:	b1 81       	ldd	r27, Z+1	; 0x01
     c82:	17 96       	adiw	r26, 0x07	; 7
     c84:	8d 91       	ld	r24, X+
     c86:	9c 91       	ld	r25, X
     c88:	18 97       	sbiw	r26, 0x08	; 8
     c8a:	02 97       	sbiw	r24, 0x02	; 2
     c8c:	e0 f4       	brcc	.+56     	; 0xcc6 <TerminateTask+0x54>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	cd 91       	ld	r28, X+
     c92:	dc 91       	ld	r29, X
     c94:	15 97       	sbiw	r26, 0x05	; 5
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	9d 81       	ldd	r25, Y+5	; 0x05
     c9a:	89 2b       	or	r24, r25
     c9c:	c9 f4       	brne	.+50     	; 0xcd0 <TerminateTask+0x5e>
     c9e:	87 85       	ldd	r24, Z+15	; 0x0f
     ca0:	88 23       	and	r24, r24
     ca2:	19 f0       	breq	.+6      	; 0xcaa <TerminateTask+0x38>
     ca4:	17 86       	std	Z+15, r1	; 0x0f
     ca6:	85 85       	ldd	r24, Z+13	; 0x0d
     ca8:	8f bf       	out	0x3f, r24	; 63
     caa:	81 89       	ldd	r24, Z+17	; 0x11
     cac:	88 23       	and	r24, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <TerminateTask+0x42>
     cb0:	11 8a       	std	Z+17, r1	; 0x11
     cb2:	78 94       	sei
     cb4:	8f b7       	in	r24, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	6e e1       	ldi	r22, 0x1E	; 30
     cba:	7c e0       	ldi	r23, 0x0C	; 12
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	8d 91       	ld	r24, X+
     cc0:	9c 91       	ld	r25, X
     cc2:	0e 94 c8 00 	call	0x190	; 0x190 <osEE_hal_terminate_ctx>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	fa cf       	rjmp	.-12     	; 0xcca <TerminateTask+0x58>

00000cd6 <GetResource>:
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <osEE_kdb_var+0x8>
     ce4:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <osEE_kdb_var+0x9>
     ce8:	82 17       	cp	r24, r18
     cea:	93 07       	cpc	r25, r19
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <GetResource+0x1a>
     cee:	42 c0       	rjmp	.+132    	; 0xd74 <GetResource+0x9e>
     cf0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     cf4:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
     cf8:	40 81       	ld	r20, Z
     cfa:	51 81       	ldd	r21, Z+1	; 0x01
     cfc:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <osEE_kdb_var+0x6>
     d00:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <osEE_kdb_var+0x7>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	ec 01       	movw	r28, r24
     d0e:	08 81       	ld	r16, Y
     d10:	19 81       	ldd	r17, Y+1	; 0x01
     d12:	f8 01       	movw	r30, r16
     d14:	a0 81       	ld	r26, Z
     d16:	b1 81       	ldd	r27, Z+1	; 0x01
     d18:	ea 01       	movw	r28, r20
     d1a:	ec 81       	ldd	r30, Y+4	; 0x04
     d1c:	fd 81       	ldd	r31, Y+5	; 0x05
     d1e:	e8 01       	movw	r28, r16
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	2f b7       	in	r18, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	6d 91       	ld	r22, X+
     d2c:	7c 91       	ld	r23, X
     d2e:	14 97       	sbiw	r26, 0x04	; 4
     d30:	67 2b       	or	r22, r23
     d32:	21 f4       	brne	.+8      	; 0xd3c <GetResource+0x66>
     d34:	ea 01       	movw	r28, r20
     d36:	3b 85       	ldd	r19, Y+11	; 0x0b
     d38:	83 17       	cp	r24, r19
     d3a:	40 f4       	brcc	.+16     	; 0xd4c <GetResource+0x76>
     d3c:	2f bf       	out	0x3f, r18	; 63
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret
     d4c:	98 17       	cp	r25, r24
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <GetResource+0x7c>
     d50:	81 83       	std	Z+1, r24	; 0x01
     d52:	14 96       	adiw	r26, 0x04	; 4
     d54:	5c 93       	st	X, r21
     d56:	4e 93       	st	-X, r20
     d58:	13 97       	sbiw	r26, 0x03	; 3
     d5a:	2f bf       	out	0x3f, r18	; 63
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	3c 93       	st	X, r19
     d64:	2e 93       	st	-X, r18
     d66:	12 96       	adiw	r26, 0x02	; 2
     d68:	9c 93       	st	X, r25
     d6a:	15 83       	std	Z+5, r17	; 0x05
     d6c:	04 83       	std	Z+4, r16	; 0x04
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	e7 cf       	rjmp	.-50     	; 0xd42 <GetResource+0x6c>
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	e4 cf       	rjmp	.-56     	; 0xd42 <GetResource+0x6c>

00000d7a <ReleaseResource>:
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <osEE_kdb_var+0x8>
     d86:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <osEE_kdb_var+0x9>
     d8a:	82 17       	cp	r24, r18
     d8c:	93 07       	cpc	r25, r19
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <ReleaseResource+0x18>
     d90:	47 c0       	rjmp	.+142    	; 0xe20 <ReleaseResource+0xa6>
     d92:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     d96:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	da 01       	movw	r26, r20
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	ed 91       	ld	r30, X+
     da4:	fc 91       	ld	r31, X
     da6:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <osEE_kdb_var+0x6>
     daa:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <osEE_kdb_var+0x7>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	ec 01       	movw	r28, r24
     db8:	88 81       	ld	r24, Y
     dba:	99 81       	ldd	r25, Y+1	; 0x01
     dbc:	ec 01       	movw	r28, r24
     dbe:	a8 81       	ld	r26, Y
     dc0:	b9 81       	ldd	r27, Y+1	; 0x01
     dc2:	13 96       	adiw	r26, 0x03	; 3
     dc4:	2d 91       	ld	r18, X+
     dc6:	3c 91       	ld	r19, X
     dc8:	14 97       	sbiw	r26, 0x04	; 4
     dca:	23 2b       	or	r18, r19
     dcc:	61 f1       	breq	.+88     	; 0xe26 <ReleaseResource+0xac>
     dce:	24 81       	ldd	r18, Z+4	; 0x04
     dd0:	35 81       	ldd	r19, Z+5	; 0x05
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	39 f5       	brne	.+78     	; 0xe26 <ReleaseResource+0xac>
     dd8:	1f b7       	in	r17, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	84 81       	ldd	r24, Z+4	; 0x04
     dde:	95 81       	ldd	r25, Z+5	; 0x05
     de0:	ec 01       	movw	r28, r24
     de2:	88 81       	ld	r24, Y
     de4:	99 81       	ldd	r25, Y+1	; 0x01
     de6:	ec 01       	movw	r28, r24
     de8:	88 81       	ld	r24, Y
     dea:	99 81       	ldd	r25, Y+1	; 0x01
     dec:	95 83       	std	Z+5, r25	; 0x05
     dee:	84 83       	std	Z+4, r24	; 0x04
     df0:	89 2b       	or	r24, r25
     df2:	99 f0       	breq	.+38     	; 0xe1a <ReleaseResource+0xa0>
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8c 91       	ld	r24, X
     df8:	12 97       	sbiw	r26, 0x02	; 2
     dfa:	81 83       	std	Z+1, r24	; 0x01
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	1c 92       	st	X, r1
     e00:	1e 92       	st	-X, r1
     e02:	13 97       	sbiw	r26, 0x03	; 3
     e04:	83 eb       	ldi	r24, 0xB3	; 179
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 17 0a 	call	0x142e	; 0x142e <osEE_scheduler_task_preemption_point>
     e0c:	1f bf       	out	0x3f, r17	; 63
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	08 95       	ret
     e1a:	ea 01       	movw	r28, r20
     e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1e:	ed cf       	rjmp	.-38     	; 0xdfa <ReleaseResource+0x80>
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	f6 cf       	rjmp	.-20     	; 0xe12 <ReleaseResource+0x98>
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	f3 cf       	rjmp	.-26     	; 0xe12 <ReleaseResource+0x98>

00000e2c <WaitEvent>:
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	6c 01       	movw	r12, r24
     e40:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     e44:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 59 05 	call	0xab2	; 0xab2 <osEE_check_disableint>
     e4e:	89 2b       	or	r24, r25
     e50:	e9 f5       	brne	.+122    	; 0xecc <WaitEvent+0xa0>
     e52:	f8 01       	movw	r30, r16
     e54:	e0 80       	ld	r14, Z
     e56:	f1 80       	ldd	r15, Z+1	; 0x01
     e58:	f7 01       	movw	r30, r14
     e5a:	87 81       	ldd	r24, Z+7	; 0x07
     e5c:	90 85       	ldd	r25, Z+8	; 0x08
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	b8 f5       	brcc	.+110    	; 0xed2 <WaitEvent+0xa6>
     e64:	c4 81       	ldd	r28, Z+4	; 0x04
     e66:	d5 81       	ldd	r29, Z+5	; 0x05
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	23 2b       	or	r18, r19
     e6e:	a1 f5       	brne	.+104    	; 0xed8 <WaitEvent+0xac>
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	a9 f5       	brne	.+106    	; 0xede <WaitEvent+0xb2>
     e74:	bf b6       	in	r11, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	88 85       	ldd	r24, Y+8	; 0x08
     e7a:	99 85       	ldd	r25, Y+9	; 0x09
     e7c:	8c 21       	and	r24, r12
     e7e:	9d 21       	and	r25, r13
     e80:	89 2b       	or	r24, r25
     e82:	b9 f4       	brne	.+46     	; 0xeb2 <WaitEvent+0x86>
     e84:	df 82       	std	Y+7, r13	; 0x07
     e86:	ce 82       	std	Y+6, r12	; 0x06
     e88:	b8 01       	movw	r22, r16
     e8a:	6e 5f       	subi	r22, 0xFE	; 254
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	85 ec       	ldi	r24, 0xC5	; 197
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 bc 08 	call	0x1178	; 0x1178 <osEE_scheduler_core_pop_running>
     e96:	9b 87       	std	Y+11, r25	; 0x0b
     e98:	8a 87       	std	Y+10, r24	; 0x0a
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9b 83       	std	Y+3, r25	; 0x03
     ea0:	8a 83       	std	Y+2, r24	; 0x02
     ea2:	f8 01       	movw	r30, r16
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	c7 01       	movw	r24, r14
     eaa:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <osEE_change_context_from_running>
     eae:	1f 82       	std	Y+7, r1	; 0x07
     eb0:	1e 82       	std	Y+6, r1	; 0x06
     eb2:	bf be       	out	0x3f, r11	; 63
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	08 95       	ret
     ecc:	8c e0       	ldi	r24, 0x0C	; 12
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	f3 cf       	rjmp	.-26     	; 0xeb8 <WaitEvent+0x8c>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	f0 cf       	rjmp	.-32     	; 0xeb8 <WaitEvent+0x8c>
     ed8:	86 e0       	ldi	r24, 0x06	; 6
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	ed cf       	rjmp	.-38     	; 0xeb8 <WaitEvent+0x8c>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	ea cf       	rjmp	.-44     	; 0xeb8 <WaitEvent+0x8c>

00000ee4 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
     eee:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     ef2:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (SRS_Os_11009, SRS_Os_11013) */
  if (osEE_check_disableint(p_ccb)) {
     ef6:	c8 01       	movw	r24, r16
     ef8:	0e 94 59 05 	call	0xab2	; 0xab2 <osEE_check_disableint>
     efc:	89 2b       	or	r24, r25
     efe:	f9 f4       	brne	.+62     	; 0xf3e <ClearEvent+0x5a>
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
     f00:	d8 01       	movw	r26, r16
     f02:	ed 91       	ld	r30, X+
     f04:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (SRS_Os_11009, SRS_Os_11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
     f06:	87 81       	ldd	r24, Z+7	; 0x07
     f08:	90 85       	ldd	r25, Z+8	; 0x08
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	91 05       	cpc	r25, r1
     f0e:	d0 f4       	brcc	.+52     	; 0xf44 <ClearEvent+0x60>
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  )
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	d9 f4       	brne	.+54     	; 0xf4a <ClearEvent+0x66>
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
     f14:	04 80       	ldd	r0, Z+4	; 0x04
     f16:	f5 81       	ldd	r31, Z+5	; 0x05
     f18:	e0 2d       	mov	r30, r0
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f1a:	2f b7       	in	r18, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     f1c:	f8 94       	cli
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
     f1e:	c0 95       	com	r28
     f20:	d0 95       	com	r29
     f22:	80 85       	ldd	r24, Z+8	; 0x08
     f24:	91 85       	ldd	r25, Z+9	; 0x09
     f26:	8c 23       	and	r24, r28
     f28:	9d 23       	and	r25, r29
     f2a:	91 87       	std	Z+9, r25	; 0x09
     f2c:	80 87       	std	Z+8, r24	; 0x08
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     f2e:	2f bf       	out	0x3f, r18	; 63

    osEE_unlock_core(p_cdb);
    osEE_end_primitive(flags);

    ev = E_OK;
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (SRS_Os_11009, SRS_Os_11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
     f3e:	8c e0       	ldi	r24, 0x0C	; 12
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	f8 cf       	rjmp	.-16     	; 0xf34 <ClearEvent+0x50>
#if (defined(OSEE_HAS_SERVICE_PROTECTION))
      || (p_ccb->os_context > OSEE_TASK_CTX)
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  )
  {
    ev = E_OS_CALLEVEL;
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	f5 cf       	rjmp	.-22     	; 0xf34 <ClearEvent+0x50>
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
     f4e:	f2 cf       	rjmp	.-28     	; 0xf34 <ClearEvent+0x50>

00000f50 <osEE_scheduler_task_wrapper_restore>:
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
     f50:	dc 01       	movw	r26, r24
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	ed 91       	ld	r30, X+
     f56:	fc 91       	ld	r31, X
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	93 83       	std	Z+3, r25	; 0x03
     f5e:	82 83       	std	Z+2, r24	; 0x02
    }
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
     f60:	08 95       	ret

00000f62 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
     f62:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
     f64:	ec 81       	ldd	r30, Y+4	; 0x04
     f66:	fd 81       	ldd	r31, Y+5	; 0x05
     f68:	81 81       	ldd	r24, Z+1	; 0x01
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
     f6a:	24 e0       	ldi	r18, 0x04	; 4
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	33 83       	std	Z+3, r19	; 0x03
     f70:	22 83       	std	Z+2, r18	; 0x02
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	09 f0       	breq	.+2      	; 0xf78 <osEE_scheduler_task_wrapper_run+0x16>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     f76:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
     f78:	e9 85       	ldd	r30, Y+9	; 0x09
     f7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f7c:	09 95       	icall
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
     f7e:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
     f82:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
     f86:	10 8a       	std	Z+16, r1	; 0x10
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
     f88:	87 85       	ldd	r24, Z+15	; 0x0f
     f8a:	88 23       	and	r24, r24
     f8c:	19 f0       	breq	.+6      	; 0xf94 <osEE_scheduler_task_wrapper_run+0x32>
    p_ccb->s_isr_all_cnt = 0U;
     f8e:	17 86       	std	Z+15, r1	; 0x0f
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
     f90:	85 85       	ldd	r24, Z+13	; 0x0d
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
     f92:	8f bf       	out	0x3f, r24	; 63
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
     f94:	81 89       	ldd	r24, Z+17	; 0x11
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <osEE_scheduler_task_wrapper_run+0x3c>
    p_ccb->d_isr_all_cnt = 0U;
     f9a:	11 8a       	std	Z+17, r1	; 0x11
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
     f9c:	78 94       	sei
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
     f9e:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
     fa0:	f8 94       	cli

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
     fa2:	8f 81       	ldd	r24, Y+7	; 0x07
     fa4:	98 85       	ldd	r25, Y+8	; 0x08
     fa6:	ec 81       	ldd	r30, Y+4	; 0x04
     fa8:	fd 81       	ldd	r31, Y+5	; 0x05
     faa:	02 97       	sbiw	r24, 0x02	; 2
     fac:	09 f5       	brne	.+66     	; 0xff0 <osEE_scheduler_task_wrapper_run+0x8e>
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
     fae:	a4 81       	ldd	r26, Z+4	; 0x04
     fb0:	b5 81       	ldd	r27, Z+5	; 0x05
     fb2:	10 97       	sbiw	r26, 0x00	; 0
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <osEE_scheduler_task_wrapper_run+0x60>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
     fb6:	6e e1       	ldi	r22, 0x1E	; 30
     fb8:	7c e0       	ldi	r23, 0x0C	; 12
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	0e 94 c8 00 	call	0x190	; 0x190 <osEE_hal_terminate_ctx>
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
     fc2:	0d 90       	ld	r0, X+
     fc4:	bc 91       	ld	r27, X
     fc6:	a0 2d       	mov	r26, r0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	1c 92       	st	X, r1
     fcc:	1e 92       	st	-X, r1
     fce:	13 97       	sbiw	r26, 0x03	; 3
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	95 83       	std	Z+5, r25	; 0x05
     fd6:	84 83       	std	Z+4, r24	; 0x04
     fd8:	ea cf       	rjmp	.-44     	; 0xfae <osEE_scheduler_task_wrapper_run+0x4c>
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
     fda:	0d 90       	ld	r0, X+
     fdc:	bc 91       	ld	r27, X
     fde:	a0 2d       	mov	r26, r0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
     fe0:	14 96       	adiw	r26, 0x04	; 4
     fe2:	1c 92       	st	X, r1
     fe4:	1e 92       	st	-X, r1
     fe6:	13 97       	sbiw	r26, 0x03	; 3
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
     fe8:	8d 91       	ld	r24, X+
     fea:	9c 91       	ld	r25, X
     fec:	95 83       	std	Z+5, r25	; 0x05
     fee:	84 83       	std	Z+4, r24	; 0x04
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
     ff0:	a4 81       	ldd	r26, Z+4	; 0x04
     ff2:	b5 81       	ldd	r27, Z+5	; 0x05
     ff4:	10 97       	sbiw	r26, 0x00	; 0
     ff6:	89 f7       	brne	.-30     	; 0xfda <osEE_scheduler_task_wrapper_run+0x78>
     ff8:	de cf       	rjmp	.-68     	; 0xfb6 <osEE_scheduler_task_wrapper_run+0x54>

00000ffa <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1002:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1004:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
    1006:	83 eb       	ldi	r24, 0xB3	; 179
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 17 0a 	call	0x142e	; 0x142e <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    100e:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1010:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    1014:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1018:	c0 91 c7 01 	lds	r28, 0x01C7	; 0x8001c7 <osEE_cdb_var+0x2>
    101c:	d0 91 c8 01 	lds	r29, 0x01C8	; 0x8001c8 <osEE_cdb_var+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1020:	f8 01       	movw	r30, r16
    1022:	80 85       	ldd	r24, Z+8	; 0x08
    1024:	91 85       	ldd	r25, Z+9	; 0x09
    1026:	02 97       	sbiw	r24, 0x02	; 2
    1028:	51 f0       	breq	.+20     	; 0x103e <osEE_idle_hook_wrapper+0x44>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    102a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <osEE_cdb_var+0x4>
    102e:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <osEE_cdb_var+0x5>
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    103a:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    103e:	20 97       	sbiw	r28, 0x00	; 0
    1040:	79 f3       	breq	.-34     	; 0x1020 <osEE_idle_hook_wrapper+0x26>
      p_idle_hook();
    1042:	fe 01       	movw	r30, r28
    1044:	09 95       	icall
    1046:	ec cf       	rjmp	.-40     	; 0x1020 <osEE_idle_hook_wrapper+0x26>

00001048 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1050:	ec 01       	movw	r28, r24
    1052:	a8 81       	ld	r26, Y
    1054:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1056:	eb 01       	movw	r28, r22
    1058:	e8 81       	ld	r30, Y
    105a:	f9 81       	ldd	r31, Y+1	; 0x01
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
    105c:	16 96       	adiw	r26, 0x06	; 6
    105e:	cd 91       	ld	r28, X+
    1060:	dc 91       	ld	r29, X
    1062:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    1064:	20 97       	sbiw	r28, 0x00	; 0
    1066:	c1 f1       	breq	.+112    	; 0x10d8 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	09 f4       	brne	.+2      	; 0x1072 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    1072:	ec 01       	movw	r28, r24
    1074:	0c 81       	ldd	r16, Y+4	; 0x04
    1076:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1078:	22 81       	ldd	r18, Z+2	; 0x02
    107a:	33 81       	ldd	r19, Z+3	; 0x03
    107c:	e9 01       	movw	r28, r18
    107e:	4c 81       	ldd	r20, Y+4	; 0x04
    1080:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1082:	e8 01       	movw	r28, r16
    1084:	39 81       	ldd	r19, Y+1	; 0x01
    1086:	ea 01       	movw	r28, r20
    1088:	29 81       	ldd	r18, Y+1	; 0x01
    108a:	32 17       	cp	r19, r18
    108c:	88 f5       	brcc	.+98     	; 0x10f0 <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    108e:	22 e0       	ldi	r18, 0x02	; 2
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	e8 01       	movw	r28, r16
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1094:	3b 83       	std	Y+3, r19	; 0x03
    1096:	2a 83       	std	Y+2, r18	; 0x02
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	eb 01       	movw	r28, r22
    109e:	39 83       	std	Y+1, r19	; 0x01
    10a0:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    10a2:	c2 81       	ldd	r28, Z+2	; 0x02
    10a4:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    10a6:	2c 81       	ldd	r18, Y+4	; 0x04
    10a8:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    10aa:	16 96       	adiw	r26, 0x06	; 6
    10ac:	4d 91       	ld	r20, X+
    10ae:	5c 91       	ld	r21, X
    10b0:	17 97       	sbiw	r26, 0x07	; 7
    10b2:	51 83       	std	Z+1, r21	; 0x01
    10b4:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    10b6:	17 96       	adiw	r26, 0x07	; 7
    10b8:	fc 93       	st	X, r31
    10ba:	ee 93       	st	-X, r30
    10bc:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    10be:	cd 93       	st	X+, r28
    10c0:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    10c2:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    10c4:	f9 01       	movw	r30, r18
    10c6:	51 81       	ldd	r21, Z+1	; 0x01
    10c8:	54 17       	cp	r21, r20
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    10cc:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    10d8:	30 97       	sbiw	r30, 0x00	; 0
    10da:	51 f0       	breq	.+20     	; 0x10f0 <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
    10dc:	ec 01       	movw	r28, r24
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    10e2:	ec 01       	movw	r28, r24
    10e4:	4c 81       	ldd	r20, Y+4	; 0x04
    10e6:	5d 81       	ldd	r21, Y+5	; 0x05
    10e8:	22 e0       	ldi	r18, 0x02	; 2
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	ea 01       	movw	r28, r20
    10ee:	d2 cf       	rjmp	.-92     	; 0x1094 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    10f4:	ec cf       	rjmp	.-40     	; 0x10ce <osEE_scheduler_core_rq_preempt_stk+0x86>

000010f6 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
    10fa:	db 01       	movw	r26, r22
    10fc:	12 96       	adiw	r26, 0x02	; 2
    10fe:	ed 91       	ld	r30, X+
    1100:	fc 91       	ld	r31, X
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
    1102:	41 15       	cp	r20, r1
    1104:	51 05       	cpc	r21, r1
    1106:	a1 f0       	breq	.+40     	; 0x1130 <osEE_sn_priority_insert+0x3a>
    1108:	23 85       	ldd	r18, Z+11	; 0x0b
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    110a:	dc 01       	movw	r26, r24
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	89 f4       	brne	.+34     	; 0x113a <osEE_sn_priority_insert+0x44>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1118:	10 97       	sbiw	r26, 0x00	; 0
    111a:	09 f1       	breq	.+66     	; 0x115e <osEE_sn_priority_insert+0x68>
    p_prev->p_next = p_sn_new;
    111c:	6d 93       	st	X+, r22
    111e:	7c 93       	st	X, r23
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    1124:	db 01       	movw	r26, r22
    1126:	ed 93       	st	X+, r30
    1128:	fc 93       	st	X, r31

  return head_changed;
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
    1130:	04 80       	ldd	r0, Z+4	; 0x04
    1132:	f5 81       	ldd	r31, Z+5	; 0x05
    1134:	e0 2d       	mov	r30, r0
    1136:	21 81       	ldd	r18, Z+1	; 0x01
    1138:	e8 cf       	rjmp	.-48     	; 0x110a <osEE_sn_priority_insert+0x14>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    113a:	c2 81       	ldd	r28, Z+2	; 0x02
    113c:	d3 81       	ldd	r29, Z+3	; 0x03
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
    113e:	41 15       	cp	r20, r1
    1140:	51 05       	cpc	r21, r1
    1142:	41 f0       	breq	.+16     	; 0x1154 <osEE_sn_priority_insert+0x5e>
      prio_to_check = p_cur_tdb->ready_prio;
    1144:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    1146:	32 17       	cp	r19, r18
    1148:	38 f3       	brcs	.-50     	; 0x1118 <osEE_sn_priority_insert+0x22>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    114a:	df 01       	movw	r26, r30
    114c:	01 90       	ld	r0, Z+
    114e:	f0 81       	ld	r31, Z
    1150:	e0 2d       	mov	r30, r0
    1152:	e0 cf       	rjmp	.-64     	; 0x1114 <osEE_sn_priority_insert+0x1e>
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1154:	0c 80       	ldd	r0, Y+4	; 0x04
    1156:	dd 81       	ldd	r29, Y+5	; 0x05
    1158:	c0 2d       	mov	r28, r0
    115a:	39 81       	ldd	r19, Y+1	; 0x01
    115c:	f4 cf       	rjmp	.-24     	; 0x1146 <osEE_sn_priority_insert+0x50>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    115e:	dc 01       	movw	r26, r24
    1160:	6d 93       	st	X+, r22
    1162:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	dd cf       	rjmp	.-70     	; 0x1124 <osEE_sn_priority_insert+0x2e>

0000116a <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    116a:	fb 01       	movw	r30, r22
    116c:	53 83       	std	Z+3, r21	; 0x03
    116e:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <osEE_sn_priority_insert>

00001178 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1186:	fc 01       	movw	r30, r24
    1188:	c0 81       	ld	r28, Z
    118a:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    118c:	ee 80       	ldd	r14, Y+6	; 0x06
    118e:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1190:	f7 01       	movw	r30, r14
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	9f 83       	std	Y+7, r25	; 0x07
    1198:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 24 08 	call	0x1048	; 0x1048 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    11a0:	89 2b       	or	r24, r25
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    11a4:	ee 81       	ldd	r30, Y+6	; 0x06
    11a6:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
    11a8:	30 97       	sbiw	r30, 0x00	; 0
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    11b4:	c7 01       	movw	r24, r14
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret
      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    11c4:	f8 01       	movw	r30, r16
    11c6:	84 81       	ldd	r24, Z+4	; 0x04
    11c8:	95 81       	ldd	r25, Z+5	; 0x05
    11ca:	f2 cf       	rjmp	.-28     	; 0x11b0 <osEE_scheduler_core_pop_running+0x38>

000011cc <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
    11cc:	dc 01       	movw	r26, r24
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
    11ce:	14 96       	adiw	r26, 0x04	; 4
    11d0:	ed 91       	ld	r30, X+
    11d2:	fc 91       	ld	r31, X
    11d4:	15 97       	sbiw	r26, 0x05	; 5
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
    11d6:	90 81       	ld	r25, Z
    11d8:	1d 96       	adiw	r26, 0x0d	; 13
    11da:	8c 91       	ld	r24, X
    11dc:	98 17       	cp	r25, r24
    11de:	28 f4       	brcc	.+10     	; 0x11ea <osEE_task_activated+0x1e>
    ++p_tcb_act->current_num_of_act;
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	90 83       	st	Z, r25
    ev = E_OK;
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
  } else {
    ev = E_OS_LIMIT;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	90 e0       	ldi	r25, 0x00	; 0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
    11ee:	08 95       	ret

000011f0 <osEE_task_end>:
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    11f0:	dc 01       	movw	r26, r24
    11f2:	14 96       	adiw	r26, 0x04	; 4
    11f4:	ed 91       	ld	r30, X+
    11f6:	fc 91       	ld	r31, X
    11f8:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    11fa:	1b 96       	adiw	r26, 0x0b	; 11
    11fc:	8c 91       	ld	r24, X
    11fe:	81 83       	std	Z+1, r24	; 0x01

  --p_tcb->current_num_of_act;
    1200:	80 81       	ld	r24, Z
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	80 83       	st	Z, r24

  if (p_tcb->current_num_of_act == 0U) {
    1206:	81 11       	cpse	r24, r1
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <osEE_task_end+0x20>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    120a:	13 82       	std	Z+3, r1	; 0x03
    120c:	12 82       	std	Z+2, r1	; 0x02
    120e:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	93 83       	std	Z+3, r25	; 0x03
    1216:	82 83       	std	Z+2, r24	; 0x02
  }
}
    1218:	08 95       	ret

0000121a <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	da 01       	movw	r26, r20
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    1220:	ec 01       	movw	r28, r24
    1222:	ec 81       	ldd	r30, Y+4	; 0x04
    1224:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

#if (defined(OSEE_HAS_CHECKS))
  if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1226:	8f 81       	ldd	r24, Y+7	; 0x07
    1228:	98 85       	ldd	r25, Y+8	; 0x08
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	39 f0       	breq	.+14     	; 0x123c <osEE_task_event_set_mask+0x22>
    *p_ev = E_OS_ACCESS;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
  } else
  if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    *p_ev = E_OS_STATE;
    1232:	8d 93       	st	X+, r24
    1234:	9c 93       	st	X, r25
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	80 e0       	ldi	r24, 0x00	; 0
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <osEE_task_event_set_mask+0x58>

#if (defined(OSEE_HAS_CHECKS))
  if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    *p_ev = E_OS_ACCESS;
  } else
  if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	89 2b       	or	r24, r25
    1242:	19 f4       	brne	.+6      	; 0x124a <osEE_task_event_set_mask+0x30>
    *p_ev = E_OS_STATE;
    1244:	87 e0       	ldi	r24, 0x07	; 7
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	f4 cf       	rjmp	.-24     	; 0x1232 <osEE_task_event_set_mask+0x18>
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
    124a:	80 85       	ldd	r24, Z+8	; 0x08
    124c:	91 85       	ldd	r25, Z+9	; 0x09
    124e:	86 2b       	or	r24, r22
    1250:	97 2b       	or	r25, r23
    1252:	91 87       	std	Z+9, r25	; 0x09
    1254:	80 87       	std	Z+8, r24	; 0x08

    *p_ev = E_OK;
    1256:	1d 92       	st	X+, r1
    1258:	1c 92       	st	X, r1

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
    125a:	86 81       	ldd	r24, Z+6	; 0x06
    125c:	97 81       	ldd	r25, Z+7	; 0x07
    125e:	68 23       	and	r22, r24
    1260:	79 23       	and	r23, r25
    1262:	67 2b       	or	r22, r23
    1264:	41 f3       	breq	.-48     	; 0x1236 <osEE_task_event_set_mask+0x1c>
      p_own_sn = p_tcb_waking_up->p_own_sn;
    1266:	82 85       	ldd	r24, Z+10	; 0x0a
    1268:	93 85       	ldd	r25, Z+11	; 0x0b

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	11 f0       	breq	.+4      	; 0x1272 <osEE_task_event_set_mask+0x58>
        p_tcb_waking_up->p_own_sn = NULL;
    126e:	13 86       	std	Z+11, r1	; 0x0b
    1270:	12 86       	std	Z+10, r1	; 0x0a
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <osEE_activate_isr2>:
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    1278:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <osEE_kdb_var+0x2>
    127c:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <osEE_kdb_var+0x3>
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
    128e:	db 01       	movw	r26, r22
    1290:	14 96       	adiw	r26, 0x04	; 4
    1292:	ed 91       	ld	r30, X+
    1294:	fc 91       	ld	r31, X
    1296:	80 81       	ld	r24, Z
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 83       	st	Z, r24

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	83 eb       	ldi	r24, 0xB3	; 179
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <osEE_scheduler_task_set_running>

000012a8 <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
    12a8:	ab 01       	movw	r20, r22
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
    12aa:	fb 01       	movw	r30, r22
    12ac:	a4 81       	ldd	r26, Z+4	; 0x04
    12ae:	b5 81       	ldd	r27, Z+5	; 0x05
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
    12b0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    12b4:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    12b8:	12 96       	adiw	r26, 0x02	; 2
    12ba:	8d 91       	ld	r24, X+
    12bc:	9c 91       	ld	r25, X
    12be:	13 97       	sbiw	r26, 0x03	; 3
    12c0:	89 2b       	or	r24, r25
    12c2:	51 f4       	brne	.+20     	; 0x12d8 <osEE_scheduler_task_insert+0x30>
    p_tcb_act->status = OSEE_TASK_READY;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	13 96       	adiw	r26, 0x03	; 3
    12ca:	9c 93       	st	X, r25
    12cc:	8e 93       	st	-X, r24
    12ce:	12 97       	sbiw	r26, 0x02	; 2
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
    12d0:	19 96       	adiw	r26, 0x09	; 9
    12d2:	1c 92       	st	X, r1
    12d4:	1e 92       	st	-X, r1
    12d6:	18 97       	sbiw	r26, 0x08	; 8
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
    12d8:	a4 81       	ldd	r26, Z+4	; 0x04
    12da:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_first)              = p_sn_allocated->p_next;
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	95 83       	std	Z+5, r25	; 0x05
    12e4:	84 83       	std	Z+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	1c 92       	st	X, r1
    12ea:	1e 92       	st	-X, r1
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    12ec:	bd 01       	movw	r22, r26
    12ee:	cf 01       	movw	r24, r30
    12f0:	02 96       	adiw	r24, 0x02	; 2
    12f2:	0c 94 b5 08 	jmp	0x116a	; 0x116a <osEE_scheduler_rq_insert>

000012f6 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    12fe:	db 01       	movw	r26, r22
    1300:	12 96       	adiw	r26, 0x02	; 2
    1302:	4d 91       	ld	r20, X+
    1304:	5c 91       	ld	r21, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    1306:	fa 01       	movw	r30, r20
    1308:	c4 81       	ldd	r28, Z+4	; 0x04
    130a:	d5 81       	ldd	r29, Z+5	; 0x05
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    130c:	00 91 c5 01 	lds	r16, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    1310:	10 91 c6 01 	lds	r17, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9b 83       	std	Y+3, r25	; 0x03
    131a:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    131c:	83 85       	ldd	r24, Z+11	; 0x0b
    131e:	89 83       	std	Y+1, r24	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1320:	c8 01       	movw	r24, r16
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	0e 94 b5 08 	call	0x116a	; 0x116a <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	91 f4       	brne	.+36     	; 0x1350 <osEE_scheduler_task_unblocked+0x5a>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    132c:	d8 01       	movw	r26, r16
    132e:	ed 91       	ld	r30, X+
    1330:	fc 91       	ld	r31, X
    1332:	04 80       	ldd	r0, Z+4	; 0x04
    1334:	f5 81       	ldd	r31, Z+5	; 0x05
    1336:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	39 81       	ldd	r19, Y+1	; 0x01
    133e:	21 81       	ldd	r18, Z+1	; 0x01
    1340:	23 17       	cp	r18, r19
    1342:	08 f0       	brcs	.+2      	; 0x1346 <osEE_scheduler_task_unblocked+0x50>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1354:	f8 cf       	rjmp	.-16     	; 0x1346 <osEE_scheduler_task_unblocked+0x50>

00001356 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    136a:	c0 91 c5 01 	lds	r28, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    136e:	d0 91 c6 01 	lds	r29, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    1372:	fe 01       	movw	r30, r28
    1374:	e1 90       	ld	r14, Z+
    1376:	f1 90       	ld	r15, Z+
    1378:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    137a:	f7 01       	movw	r30, r14
    137c:	04 81       	ldd	r16, Z+4	; 0x04
    137e:	15 81       	ldd	r17, Z+5	; 0x05

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1380:	fb 01       	movw	r30, r22
    1382:	f1 82       	std	Z+1, r15	; 0x01
    1384:	e0 82       	st	Z, r14

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1386:	f8 01       	movw	r30, r16
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	04 97       	sbiw	r24, 0x04	; 4
    138e:	31 f5       	brne	.+76     	; 0x13dc <osEE_scheduler_task_terminated+0x86>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1390:	b6 01       	movw	r22, r12
    1392:	85 ec       	ldi	r24, 0xC5	; 197
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 bc 08 	call	0x1178	; 0x1178 <osEE_scheduler_core_pop_running>
    139a:	5c 01       	movw	r10, r24

      p_tdb_to = p_ccb->p_curr;
    139c:	c8 80       	ld	r12, Y
    139e:	d9 80       	ldd	r13, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    13a0:	ec 14       	cp	r14, r12
    13a2:	fd 04       	cpc	r15, r13
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <osEE_scheduler_task_terminated+0x7c>
        osEE_task_end(p_tdb_term);
    13a6:	c7 01       	movw	r24, r14
    13a8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <osEE_task_end>
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	f5 01       	movw	r30, r10
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
  (*pp_first)       = p_to_free;
    13b6:	bd 82       	std	Y+5, r11	; 0x05
    13b8:	ac 82       	std	Y+4, r10	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    13ba:	c6 01       	movw	r24, r12
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	08 95       	ret
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	81 50       	subi	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24
    13da:	e8 cf       	rjmp	.-48     	; 0x13ac <osEE_scheduler_task_terminated+0x56>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    13dc:	6e 81       	ldd	r22, Y+6	; 0x06
    13de:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    13e0:	fb 01       	movw	r30, r22
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	9f 83       	std	Y+7, r25	; 0x07
    13e8:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    13ea:	f7 01       	movw	r30, r14
    13ec:	83 85       	ldd	r24, Z+11	; 0x0b
    13ee:	f8 01       	movw	r30, r16
    13f0:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	93 83       	std	Z+3, r25	; 0x03
    13f8:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    13fa:	80 81       	ld	r24, Z
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	11 f4       	brne	.+4      	; 0x1404 <osEE_scheduler_task_terminated+0xae>
    1400:	11 86       	std	Z+9, r1	; 0x09
    1402:	10 86       	std	Z+8, r1	; 0x08
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1404:	a7 01       	movw	r20, r14
    1406:	c6 01       	movw	r24, r12
    1408:	0e 94 b5 08 	call	0x116a	; 0x116a <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    140c:	b6 01       	movw	r22, r12
    140e:	85 ec       	ldi	r24, 0xC5	; 197
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 24 08 	call	0x1048	; 0x1048 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1416:	89 2b       	or	r24, r25
    1418:	39 f4       	brne	.+14     	; 0x1428 <osEE_scheduler_task_terminated+0xd2>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    141a:	ee 81       	ldd	r30, Y+6	; 0x06
    141c:	ff 81       	ldd	r31, Y+7	; 0x07
    141e:	c2 80       	ldd	r12, Z+2	; 0x02
    1420:	d3 80       	ldd	r13, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    1422:	d9 82       	std	Y+1, r13	; 0x01
    1424:	c8 82       	st	Y, r12
    1426:	c9 cf       	rjmp	.-110    	; 0x13ba <osEE_scheduler_task_terminated+0x64>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1428:	c8 80       	ld	r12, Y
    142a:	d9 80       	ldd	r13, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    142c:	c6 cf       	rjmp	.-116    	; 0x13ba <osEE_scheduler_task_terminated+0x64>

0000142e <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1432:	c0 91 c5 01 	lds	r28, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    1436:	d0 91 c6 01 	lds	r29, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    143a:	be 01       	movw	r22, r28
    143c:	6e 5f       	subi	r22, 0xFE	; 254
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	85 ec       	ldi	r24, 0xC5	; 197
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 24 08 	call	0x1048	; 0x1048 <osEE_scheduler_core_rq_preempt_stk>

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	49 f0       	breq	.+18     	; 0x145e <osEE_scheduler_task_preemption_point+0x30>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
    144c:	68 81       	ld	r22, Y
    144e:	79 81       	ldd	r23, Y+1	; 0x01
    1450:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
  }

  return is_preemption;
    1462:	fa cf       	rjmp	.-12     	; 0x1458 <osEE_scheduler_task_preemption_point+0x2a>

00001464 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1468:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <osEE_cdb_var>
    146c:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <osEE_cdb_var+0x1>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    1474:	26 81       	ldd	r18, Z+6	; 0x06
    1476:	37 81       	ldd	r19, Z+7	; 0x07

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
    1478:	ec 01       	movw	r28, r24
    147a:	ac 81       	ldd	r26, Y+4	; 0x04
    147c:	bd 81       	ldd	r27, Y+5	; 0x05
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	cd 91       	ld	r28, X+
    1482:	dc 91       	ld	r29, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	24 97       	sbiw	r28, 0x04	; 4
    1488:	31 f4       	brne	.+12     	; 0x1496 <osEE_scheduler_task_set_running+0x32>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
    148a:	c2 e0       	ldi	r28, 0x02	; 2
    148c:	d0 e0       	ldi	r29, 0x00	; 0
    148e:	13 96       	adiw	r26, 0x03	; 3
    1490:	dc 93       	st	X, r29
    1492:	ce 93       	st	-X, r28
    1494:	12 97       	sbiw	r26, 0x02	; 2
  }
  p_ccb->p_curr                 = p_tdb;
    1496:	71 83       	std	Z+1, r23	; 0x01
    1498:	60 83       	st	Z, r22

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
    149a:	41 15       	cp	r20, r1
    149c:	51 05       	cpc	r21, r1
    149e:	b9 f4       	brne	.+46     	; 0x14ce <osEE_scheduler_task_set_running+0x6a>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
    14a0:	a4 81       	ldd	r26, Z+4	; 0x04
    14a2:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_first)              = p_sn_allocated->p_next;
    14a4:	4d 91       	ld	r20, X+
    14a6:	5c 91       	ld	r21, X
    14a8:	11 97       	sbiw	r26, 0x01	; 1
    14aa:	55 83       	std	Z+5, r21	; 0x05
    14ac:	44 83       	std	Z+4, r20	; 0x04
  p_sn_allocated->p_next  = NULL;
    14ae:	11 96       	adiw	r26, 0x01	; 1
    14b0:	1c 92       	st	X, r1
    14b2:	1e 92       	st	-X, r1
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
    14b4:	b7 83       	std	Z+7, r27	; 0x07
    14b6:	a6 83       	std	Z+6, r26	; 0x06
  } else {
    p_ccb->p_stk_sn             = p_sn;
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    14b8:	06 80       	ldd	r0, Z+6	; 0x06
    14ba:	f7 81       	ldd	r31, Z+7	; 0x07
    14bc:	e0 2d       	mov	r30, r0
    14be:	73 83       	std	Z+3, r23	; 0x03
    14c0:	62 83       	std	Z+2, r22	; 0x02
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    14c2:	31 83       	std	Z+1, r19	; 0x01
    14c4:	20 83       	st	Z, r18

  osEE_change_context_from_running(p_preempted, p_tdb);
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    14ca:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <osEE_change_context_from_running>
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
    14ce:	57 83       	std	Z+7, r21	; 0x07
    14d0:	46 83       	std	Z+6, r20	; 0x06
    14d2:	f2 cf       	rjmp	.-28     	; 0x14b8 <osEE_scheduler_task_set_running+0x54>

000014d4 <osEE_counter_insert_abs_trigger>:
    if (p_current != NULL) {
      /* Remove p_trigger_db from the list */
      p_previous->p_trigger_cb->p_next = p_trigger_cb->p_next;
    }
  }
}
    14d4:	af 92       	push	r10
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	dc 01       	movw	r26, r24
    14ea:	ad 90       	ld	r10, X+
    14ec:	bc 90       	ld	r11, X
    14ee:	e5 01       	movw	r28, r10
    14f0:	e8 81       	ld	r30, Y
    14f2:	f9 81       	ldd	r31, Y+1	; 0x01
    14f4:	2a 81       	ldd	r18, Y+2	; 0x02
    14f6:	3b 81       	ldd	r19, Y+3	; 0x03
    14f8:	db 01       	movw	r26, r22
    14fa:	cd 90       	ld	r12, X+
    14fc:	dc 90       	ld	r13, X
    14fe:	e6 01       	movw	r28, r12
    1500:	5b 83       	std	Y+3, r21	; 0x03
    1502:	4a 83       	std	Y+2, r20	; 0x02
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	30 97       	sbiw	r30, 0x00	; 0
    150e:	11 f0       	breq	.+4      	; 0x1514 <osEE_counter_insert_abs_trigger+0x40>
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	a9 f4       	brne	.+42     	; 0x153e <osEE_counter_insert_abs_trigger+0x6a>
    1514:	10 97       	sbiw	r26, 0x00	; 0
    1516:	79 f1       	breq	.+94     	; 0x1576 <osEE_counter_insert_abs_trigger+0xa2>
    1518:	0d 90       	ld	r0, X+
    151a:	bc 91       	ld	r27, X
    151c:	a0 2d       	mov	r26, r0
    151e:	6d 93       	st	X+, r22
    1520:	7c 93       	st	X, r23
    1522:	e6 01       	movw	r28, r12
    1524:	f9 83       	std	Y+1, r31	; 0x01
    1526:	e8 83       	st	Y, r30
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	08 95       	ret
    153e:	00 81       	ld	r16, Z
    1540:	11 81       	ldd	r17, Z+1	; 0x01
    1542:	e8 01       	movw	r28, r16
    1544:	ea 80       	ldd	r14, Y+2	; 0x02
    1546:	fb 80       	ldd	r15, Y+3	; 0x03
    1548:	2e 15       	cp	r18, r14
    154a:	3f 05       	cpc	r19, r15
    154c:	58 f4       	brcc	.+22     	; 0x1564 <osEE_counter_insert_abs_trigger+0x90>
    154e:	4e 15       	cp	r20, r14
    1550:	5f 05       	cpc	r21, r15
    1552:	18 f4       	brcc	.+6      	; 0x155a <osEE_counter_insert_abs_trigger+0x86>
    1554:	24 17       	cp	r18, r20
    1556:	35 07       	cpc	r19, r21
    1558:	58 f0       	brcs	.+22     	; 0x1570 <osEE_counter_insert_abs_trigger+0x9c>
    155a:	df 01       	movw	r26, r30
    155c:	e8 01       	movw	r28, r16
    155e:	e8 81       	ld	r30, Y
    1560:	f9 81       	ldd	r31, Y+1	; 0x01
    1562:	d4 cf       	rjmp	.-88     	; 0x150c <osEE_counter_insert_abs_trigger+0x38>
    1564:	24 17       	cp	r18, r20
    1566:	35 07       	cpc	r19, r21
    1568:	18 f0       	brcs	.+6      	; 0x1570 <osEE_counter_insert_abs_trigger+0x9c>
    156a:	4e 15       	cp	r20, r14
    156c:	5f 05       	cpc	r21, r15
    156e:	a8 f7       	brcc	.-22     	; 0x155a <osEE_counter_insert_abs_trigger+0x86>
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	cb cf       	rjmp	.-106    	; 0x150c <osEE_counter_insert_abs_trigger+0x38>
    1576:	d5 01       	movw	r26, r10
    1578:	d2 cf       	rjmp	.-92     	; 0x151e <osEE_counter_insert_abs_trigger+0x4a>

0000157a <osEE_counter_insert_rel_trigger>:
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	dc 01       	movw	r26, r24
    1580:	12 96       	adiw	r26, 0x02	; 2
    1582:	ed 91       	ld	r30, X+
    1584:	fc 91       	ld	r31, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
    1588:	0d 90       	ld	r0, X+
    158a:	bc 91       	ld	r27, X
    158c:	a0 2d       	mov	r26, r0
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	2d 91       	ld	r18, X+
    1592:	3c 91       	ld	r19, X
    1594:	df 01       	movw	r26, r30
    1596:	a4 1b       	sub	r26, r20
    1598:	b5 0b       	sbc	r27, r21
    159a:	a2 17       	cp	r26, r18
    159c:	b3 07       	cpc	r27, r19
    159e:	30 f0       	brcs	.+12     	; 0x15ac <osEE_counter_insert_rel_trigger+0x32>
    15a0:	42 0f       	add	r20, r18
    15a2:	53 1f       	adc	r21, r19
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <osEE_counter_insert_abs_trigger>
    15ac:	41 50       	subi	r20, 0x01	; 1
    15ae:	51 09       	sbc	r21, r1
    15b0:	42 0f       	add	r20, r18
    15b2:	53 1f       	adc	r21, r19
    15b4:	4e 1b       	sub	r20, r30
    15b6:	5f 0b       	sbc	r21, r31
    15b8:	f5 cf       	rjmp	.-22     	; 0x15a4 <osEE_counter_insert_rel_trigger+0x2a>

000015ba <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <osEE_counter_increment+0x1a>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    15d8:	dc 01       	movw	r26, r24
    15da:	cd 90       	ld	r12, X+
    15dc:	dc 90       	ld	r13, X
    15de:	11 97       	sbiw	r26, 0x01	; 1
    CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    15e0:	f6 01       	movw	r30, r12
    15e2:	22 81       	ldd	r18, Z+2	; 0x02
    15e4:	33 81       	ldd	r19, Z+3	; 0x03
    15e6:	12 96       	adiw	r26, 0x02	; 2
    15e8:	4d 91       	ld	r20, X+
    15ea:	5c 91       	ld	r21, X
    15ec:	24 17       	cp	r18, r20
    15ee:	35 07       	cpc	r19, r21
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <osEE_counter_increment+0x3a>
    15f2:	71 c0       	rjmp	.+226    	; 0x16d6 <osEE_counter_increment+0x11c>
      counter_value       = 0U;
      p_counter_cb->value = 0U;
    15f4:	13 82       	std	Z+3, r1	; 0x03
    15f6:	12 82       	std	Z+2, r1	; 0x02
      p_cdb = osEE_get_curr_core();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value       = 0U;
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	20 e0       	ldi	r18, 0x00	; 0
            to not have nested critical sections.
            To handle possible races due to cycling triggers a state
            protocol have been implemented. */
    osEE_lock_core(p_cdb);

    p_triggered_db = p_counter_cb->trigger_queue;
    15fc:	f6 01       	movw	r30, r12
    15fe:	00 81       	ld	r16, Z
    1600:	11 81       	ldd	r17, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    1602:	01 15       	cp	r16, r1
    1604:	11 05       	cpc	r17, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <osEE_counter_increment+0x50>
    1608:	57 c0       	rjmp	.+174    	; 0x16b8 <osEE_counter_increment+0xfe>
      P2CONST(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    160a:	d8 01       	movw	r26, r16
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	42 81       	ldd	r20, Z+2	; 0x02
    1614:	53 81       	ldd	r21, Z+3	; 0x03
    1616:	42 17       	cp	r20, r18
    1618:	53 07       	cpc	r21, r19
    161a:	09 f0       	breq	.+2      	; 0x161e <osEE_counter_increment+0x64>
    161c:	4d c0       	rjmp	.+154    	; 0x16b8 <osEE_counter_increment+0xfe>
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
    161e:	23 e0       	ldi	r18, 0x03	; 3
    1620:	e2 2e       	mov	r14, r18
    1622:	f1 2c       	mov	r15, r1
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
            p_current_cb = p_current->p_trigger_cb;
    1624:	2d 91       	ld	r18, X+
    1626:	3c 91       	ld	r19, X
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
    1628:	f9 01       	movw	r30, r18
    162a:	f5 82       	std	Z+5, r15	; 0x05
    162c:	e4 82       	std	Z+4, r14	; 0x04
          p_current = p_current_cb->p_next;
    162e:	a0 81       	ld	r26, Z
    1630:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    1632:	10 97       	sbiw	r26, 0x00	; 0
    1634:	49 f0       	breq	.+18     	; 0x1648 <osEE_counter_increment+0x8e>
    1636:	6d 91       	ld	r22, X+
    1638:	7c 91       	ld	r23, X
    163a:	11 97       	sbiw	r26, 0x01	; 1
            p_current_cb = p_current->p_trigger_cb;
          p_previous = p_current;
          /* Set this Trigger as Expired */
          p_current_cb->status = OSEE_TRIGGER_EXPIRED;
          p_current = p_current_cb->p_next;
        } while ((p_current != NULL) &&
    163c:	fb 01       	movw	r30, r22
    163e:	62 81       	ldd	r22, Z+2	; 0x02
    1640:	73 81       	ldd	r23, Z+3	; 0x03
    1642:	46 17       	cp	r20, r22
    1644:	57 07       	cpc	r21, r23
    1646:	71 f3       	breq	.-36     	; 0x1624 <osEE_counter_increment+0x6a>
    1648:	7c 01       	movw	r14, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    164a:	f9 01       	movw	r30, r18
    164c:	11 82       	std	Z+1, r1	; 0x01
    164e:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    1650:	f6 01       	movw	r30, r12
    1652:	b1 83       	std	Z+1, r27	; 0x01
    1654:	a0 83       	st	Z, r26
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	c8 2e       	mov	r12, r24
    165a:	d1 2c       	mov	r13, r1
#endif /* OSEE_HAS_ALARMS || OSEE_HAS_SCHEDULE_TABLES */

          /* Prepare next trigger to be handled here, before actually handle
           * the current one, otherwise cycling triggers will mess with the
           * list of triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    165c:	d8 01       	movw	r26, r16
    165e:	ed 91       	ld	r30, X+
    1660:	fc 91       	ld	r31, X
    1662:	11 97       	sbiw	r26, 0x01	; 1
    1664:	a0 80       	ld	r10, Z
    1666:	b1 80       	ldd	r11, Z+1	; 0x01
  osEE_handle_action
(
  P2VAR(OsEE_action, AUTOMATIC, OS_APPL_CONST) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev = E_OK;
    1668:	1a 82       	std	Y+2, r1	; 0x02
    166a:	19 82       	std	Y+1, r1	; 0x01
  switch (p_action->type) {
    166c:	1c 96       	adiw	r26, 0x0c	; 12
    166e:	8d 91       	ld	r24, X+
    1670:	9c 91       	ld	r25, X
    1672:	1d 97       	sbiw	r26, 0x0d	; 13
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <osEE_counter_increment+0xc2>
    167a:	42 c0       	rjmp	.+132    	; 0x1700 <osEE_counter_increment+0x146>
    167c:	88 f1       	brcs	.+98     	; 0x16e0 <osEE_counter_increment+0x126>
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <osEE_counter_increment+0xcc>
    1684:	52 c0       	rjmp	.+164    	; 0x172a <osEE_counter_increment+0x170>
    1686:	03 97       	sbiw	r24, 0x03	; 3
    1688:	09 f4       	brne	.+2      	; 0x168c <osEE_counter_increment+0xd2>
    168a:	55 c0       	rjmp	.+170    	; 0x1736 <osEE_counter_increment+0x17c>
  );

  /* Re-enter in critical section to reinsert alarm-trigger if needed */
  p_cdb = osEE_lock_and_get_curr_core();

  p_trigger_to_be_handled_cb = p_trigger_to_be_handled_db->p_trigger_cb;
    168c:	d8 01       	movw	r26, r16
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X

  if (p_trigger_to_be_handled_cb->status == OSEE_TRIGGER_EXPIRED) {
    1692:	84 81       	ldd	r24, Z+4	; 0x04
    1694:	95 81       	ldd	r25, Z+5	; 0x05
    1696:	03 97       	sbiw	r24, 0x03	; 3
    1698:	61 f4       	brne	.+24     	; 0x16b2 <osEE_counter_increment+0xf8>
    CONST(TickType, AUTOMATIC) cycle = osEE_alarm_get_cb(
    169a:	46 81       	ldd	r20, Z+6	; 0x06
    169c:	57 81       	ldd	r21, Z+7	; 0x07
        osEE_trigger_get_alarm_db(p_trigger_to_be_handled_db)
      )->cycle;
    if (cycle > 0U) {
    169e:	41 15       	cp	r20, r1
    16a0:	51 05       	cpc	r21, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <osEE_counter_increment+0xec>
    16a4:	4d c0       	rjmp	.+154    	; 0x1740 <osEE_counter_increment+0x186>
      /* Reinsert the trigger in timer wheel as relative with delta equal to
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
    16a6:	d5 82       	std	Z+5, r13	; 0x05
    16a8:	c4 82       	std	Z+4, r12	; 0x04
      osEE_counter_insert_rel_trigger(p_counter_db,
    16aa:	b8 01       	movw	r22, r16
    16ac:	c7 01       	movw	r24, r14
    16ae:	0e 94 bd 0a 	call	0x157a	; 0x157a <osEE_counter_insert_rel_trigger>
    16b2:	85 01       	movw	r16, r10
#elif (defined(OSEE_HAS_SCHEDULE_TABLES))
          osEE_counter_handle_st_expiry_point(p_counter_db,
            p_trigger_to_be_handled_db);
#endif /* OSEE_COUNTER_TRIGGER_TYPES elif OSEE_HAS_ALARMS elif
          OSEE_HAS_SCHEDULE_TABLES */
        } while (p_triggered_db != NULL);
    16b4:	ab 28       	or	r10, r11
    16b6:	91 f6       	brne	.-92     	; 0x165c <osEE_counter_increment+0xa2>
      }
    } else {
      osEE_unlock_core(p_cdb);
    }
  }
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	9f 90       	pop	r9
    16d2:	8f 90       	pop	r8
    16d4:	08 95       	ret
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value       = 0U;
      p_counter_cb->value = 0U;
    } else {
      ++p_counter_cb->value;
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	33 83       	std	Z+3, r19	; 0x03
    16dc:	22 83       	std	Z+2, r18	; 0x02
    16de:	8e cf       	rjmp	.-228    	; 0x15fc <osEE_counter_increment+0x42>
  VAR(StatusType, AUTOMATIC) ev = E_OK;
  switch (p_action->type) {
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb     = p_action->param.p_tdb;
    16e0:	f8 01       	movw	r30, r16
    16e2:	86 80       	ldd	r8, Z+6	; 0x06
    16e4:	97 80       	ldd	r9, Z+7	; 0x07

      ev = osEE_task_activated(p_tdb);
    16e6:	c4 01       	movw	r24, r8
    16e8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <osEE_task_activated>
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
      if (ev == E_OK) {
    16f0:	89 2b       	or	r24, r25
    16f2:	61 f6       	brne	.-104    	; 0x168c <osEE_counter_increment+0xd2>
        (void)osEE_scheduler_task_insert(osEE_get_kernel(), p_tdb);
    16f4:	b4 01       	movw	r22, r8
    16f6:	83 eb       	ldi	r24, 0xB3	; 179
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	0e 94 54 09 	call	0x12a8	; 0x12a8 <osEE_scheduler_task_insert>
    16fe:	c6 cf       	rjmp	.-116    	; 0x168c <osEE_counter_increment+0xd2>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;

      p_sn = osEE_task_event_set_mask(p_tdb, mask, &ev);
    1700:	1a 96       	adiw	r26, 0x0a	; 10
    1702:	6d 91       	ld	r22, X+
    1704:	7c 91       	ld	r23, X
    1706:	1b 97       	sbiw	r26, 0x0b	; 11
    1708:	ae 01       	movw	r20, r28
    170a:	4f 5f       	subi	r20, 0xFF	; 255
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	16 96       	adiw	r26, 0x06	; 6
    1710:	8d 91       	ld	r24, X+
    1712:	9c 91       	ld	r25, X
    1714:	0e 94 0d 09 	call	0x121a	; 0x121a <osEE_task_event_set_mask>

      if (p_sn != NULL) {
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	09 f4       	brne	.+2      	; 0x171e <osEE_counter_increment+0x164>
    171c:	b7 cf       	rjmp	.-146    	; 0x168c <osEE_counter_increment+0xd2>
        /* Release the TASK (and the SN) */
        (void)osEE_scheduler_task_unblocked(osEE_get_kernel(), p_sn);
    171e:	bc 01       	movw	r22, r24
    1720:	83 eb       	ldi	r24, 0xB3	; 179
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <osEE_scheduler_task_unblocked>
    1728:	b1 cf       	rjmp	.-158    	; 0x168c <osEE_counter_increment+0xd2>
      }
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      osEE_counter_increment(p_action->param.p_counter_db);
    172a:	f8 01       	movw	r30, r16
    172c:	80 85       	ldd	r24, Z+8	; 0x08
    172e:	91 85       	ldd	r25, Z+9	; 0x09
    1730:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <osEE_counter_increment>
    1734:	ab cf       	rjmp	.-170    	; 0x168c <osEE_counter_increment+0xd2>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    1736:	14 96       	adiw	r26, 0x04	; 4
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	09 95       	icall
    173e:	a6 cf       	rjmp	.-180    	; 0x168c <osEE_counter_increment+0xd2>
         cycle */
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_ACTIVE;
      osEE_counter_insert_rel_trigger(p_counter_db,
        p_trigger_to_be_handled_db, cycle);
    } else {
      p_trigger_to_be_handled_cb->status = OSEE_TRIGGER_INACTIVE;
    1740:	15 82       	std	Z+5, r1	; 0x05
    1742:	14 82       	std	Z+4, r1	; 0x04
    1744:	b6 cf       	rjmp	.-148    	; 0x16b2 <osEE_counter_increment+0xf8>

00001746 <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	db 01       	movw	r26, r22
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
    1750:	a4 81       	ldd	r26, Z+4	; 0x04
    1752:	b5 81       	ldd	r27, Z+5	; 0x05
    1754:	a2 30       	cpi	r26, 0x02	; 2
    1756:	b1 05       	cpc	r27, r1
    1758:	68 f5       	brcc	.+90     	; 0x17b4 <osEE_alarm_set_rel+0x6e>
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
    p_alarm_cb->cycle = cycle;
    175a:	37 83       	std	Z+7, r19	; 0x07
    175c:	26 83       	std	Z+6, r18	; 0x06
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
    ev = E_OS_STATE;
  } else if (p_trigger_cb->status == OSEE_TRIGGER_CANCELED) {
    175e:	11 97       	sbiw	r26, 0x01	; 1
    1760:	11 f5       	brne	.+68     	; 0x17a6 <osEE_alarm_set_rel+0x60>
{
  VAR(TickType, AUTOMATIC) when;
  CONSTP2CONST(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb    = p_counter_db->p_counter_cb;
  CONST(TickType, AUTOMATIC)
    maxallowedvalue = p_counter_db->info.maxallowedvalue;
    1762:	ec 01       	movw	r28, r24
    1764:	2a 81       	ldd	r18, Y+2	; 0x02
    1766:	3b 81       	ldd	r19, Y+3	; 0x03
  CONST(TickType, AUTOMATIC)
    value           = p_counter_cb->value;
    1768:	a8 81       	ld	r26, Y
    176a:	b9 81       	ldd	r27, Y+1	; 0x01
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	8d 91       	ld	r24, X+
    1770:	9c 91       	ld	r25, X

  if ((maxallowedvalue - delta) >= value) {
    1772:	b9 01       	movw	r22, r18
    1774:	64 1b       	sub	r22, r20
    1776:	75 0b       	sbc	r23, r21
    1778:	68 17       	cp	r22, r24
    177a:	79 07       	cpc	r23, r25
    177c:	68 f0       	brcs	.+26     	; 0x1798 <osEE_alarm_set_rel+0x52>
    when = value + delta;
    177e:	48 0f       	add	r20, r24
    1780:	59 1f       	adc	r21, r25
    p_alarm_cb->cycle = cycle;
    /* Re-turn on the trigger, that is in handling, since is handling I'll set
       'here' when based on increment */
    p_trigger_cb->when   = osEE_counter_eval_when(p_counter_db, increment);
    1782:	53 83       	std	Z+3, r21	; 0x03
    1784:	42 83       	std	Z+2, r20	; 0x02
    p_trigger_cb->status = OSEE_TRIGGER_REENABLED;
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	95 83       	std	Z+5, r25	; 0x05
    178c:	84 83       	std	Z+4, r24	; 0x04
 
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, increment
    );
 
    ev = E_OK;
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	80 e0       	ldi	r24, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret
  } else {
    when = delta - (maxallowedvalue - value) - 1U;
    1798:	41 50       	subi	r20, 0x01	; 1
    179a:	51 09       	sbc	r21, r1
    179c:	48 0f       	add	r20, r24
    179e:	59 1f       	adc	r21, r25
    17a0:	42 1b       	sub	r20, r18
    17a2:	53 0b       	sbc	r21, r19
    17a4:	ee cf       	rjmp	.-36     	; 0x1782 <osEE_alarm_set_rel+0x3c>

    ev = E_OK;
  } else {
    p_alarm_cb->cycle = cycle;
    /* Turn On the Trigger */
    p_trigger_cb->status = OSEE_TRIGGER_ACTIVE;
    17a6:	22 e0       	ldi	r18, 0x02	; 2
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	35 83       	std	Z+5, r19	; 0x05
    17ac:	24 83       	std	Z+4, r18	; 0x04
 
    osEE_counter_insert_rel_trigger(
    17ae:	0e 94 bd 0a 	call	0x157a	; 0x157a <osEE_counter_insert_rel_trigger>
    17b2:	ed cf       	rjmp	.-38     	; 0x178e <osEE_alarm_set_rel+0x48>
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->status > OSEE_TRIGGER_CANCELED) {
    ev = E_OS_STATE;
    17b4:	87 e0       	ldi	r24, 0x07	; 7
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    ev = E_OK;
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
    17b8:	ec cf       	rjmp	.-40     	; 0x1792 <osEE_alarm_set_rel+0x4c>

000017ba <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    17ba:	fb 01       	movw	r30, r22
    17bc:	dc 01       	movw	r26, r24
    17be:	12 96       	adiw	r26, 0x02	; 2
    17c0:	4d 91       	ld	r20, X+
    17c2:	5c 91       	ld	r21, X
    17c4:	62 81       	ldd	r22, Z+2	; 0x02
    17c6:	73 81       	ldd	r23, Z+3	; 0x03
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    17c8:	a4 81       	ldd	r26, Z+4	; 0x04
    17ca:	b5 81       	ldd	r27, Z+5	; 0x05
    17cc:	12 96       	adiw	r26, 0x02	; 2
    17ce:	8d 91       	ld	r24, X+
    17d0:	9c 91       	ld	r25, X
    17d2:	02 97       	sbiw	r24, 0x02	; 2
    17d4:	19 f4       	brne	.+6      	; 0x17dc <osEE_change_context_from_running+0x22>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    17d6:	cf 01       	movw	r24, r30
    17d8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    17dc:	cf 01       	movw	r24, r30
    17de:	0c 94 a8 00 	jmp	0x150	; 0x150 <osEE_hal_save_ctx_and_ready2stacked>

000017e2 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    17e2:	cb 01       	movw	r24, r22
    17e4:	db 01       	movw	r26, r22
    17e6:	12 96       	adiw	r26, 0x02	; 2
    17e8:	6d 91       	ld	r22, X+
    17ea:	7c 91       	ld	r23, X
    17ec:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    17ee:	14 96       	adiw	r26, 0x04	; 4
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	22 81       	ldd	r18, Z+2	; 0x02
    17f6:	33 81       	ldd	r19, Z+3	; 0x03
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	11 f4       	brne	.+4      	; 0x1802 <osEE_change_context_from_task_end+0x20>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    17fe:	0c 94 80 00 	jmp	0x100	; 0x100 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    1802:	0c 94 a0 00 	jmp	0x140	; 0x140 <osEE_hal_ready2stacked>

00001806 <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    1806:	dc 01       	movw	r26, r24
    1808:	12 96       	adiw	r26, 0x02	; 2
    180a:	6d 91       	ld	r22, X+
    180c:	7c 91       	ld	r23, X
    180e:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
    1810:	ed 91       	ld	r30, X+
    1812:	fc 91       	ld	r31, X
    1814:	40 81       	ld	r20, Z
    1816:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    1818:	db 01       	movw	r26, r22
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    181e:	22 89       	ldd	r18, Z+18	; 0x12
    1820:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    1822:	21 15       	cp	r18, r1
    1824:	31 05       	cpc	r19, r1
    1826:	19 f0       	breq	.+6      	; 0x182e <osEE_idle_task_terminate+0x28>
    1828:	42 17       	cp	r20, r18
    182a:	53 07       	cpc	r21, r19
    182c:	29 f4       	brne	.+10     	; 0x1838 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    182e:	db 01       	movw	r26, r22
    1830:	ed 93       	st	X+, r30
    1832:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    1834:	0c 94 80 00 	jmp	0x100	; 0x100 <osEE_hal_restore_ctx>
    1838:	f9 01       	movw	r30, r18
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <osEE_idle_task_terminate+0x18>

0000183c <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	00 d0       	rcall	.+0      	; 0x1842 <osEE_scheduler_task_end+0x6>
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
    1846:	be 01       	movw	r22, r28
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	83 eb       	ldi	r24, 0xB3	; 179
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 ab 09 	call	0x1356	; 0x1356 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1854:	bc 01       	movw	r22, r24
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    1868:	f8 94       	cli
    186a:	ff cf       	rjmp	.-2      	; 0x186a <__vector_default+0x2>

0000186c <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    186c:	e8 e6       	ldi	r30, 0x68	; 104
}
    186e:	08 95       	ret

00001870 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0e 94 40 0c 	call	0x1880	; 0x1880 <osEE_avr8_isr2_stub>
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	18 95       	reti

00001880 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
  /* Disable IRQ */
  OSEE_hal_disableIRQ();
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);
    189e:	0e 94 3c 09 	call	0x1278	; 0x1278 <osEE_activate_isr2>

  OSEE_AVR8_ISR_POSTINSTUB();
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1

  OSEE_RETURN();
    18be:	08 95       	ret

000018c0 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    18c0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR1A = 0;
    18c4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1C = 0;
    18c8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  TCNT1  = 0;
    18cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    18d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    18d4:	61 15       	cp	r22, r1
    18d6:	20 e1       	ldi	r18, 0x10	; 16
    18d8:	72 07       	cpc	r23, r18
    18da:	81 05       	cpc	r24, r1
    18dc:	91 05       	cpc	r25, r1
    18de:	a0 f4       	brcc	.+40     	; 0x1908 <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    18e0:	e4 e0       	ldi	r30, 0x04	; 4
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	ea 95       	dec	r30
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <OsEE_atmega_startTimer1+0x22>
    18ea:	61 50       	subi	r22, 0x01	; 1
    18ec:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    18f4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    18f8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    18fc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    1900:	88 60       	ori	r24, 0x08	; 8
    1902:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}	/* startTimer1() */
    1906:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    1908:	61 15       	cp	r22, r1
    190a:	20 e8       	ldi	r18, 0x80	; 128
    190c:	72 07       	cpc	r23, r18
    190e:	81 05       	cpc	r24, r1
    1910:	91 05       	cpc	r25, r1
    1912:	30 f4       	brcc	.+12     	; 0x1920 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	61 50       	subi	r22, 0x01	; 1
    191a:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	e8 cf       	rjmp	.-48     	; 0x18f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    1920:	6c 3f       	cpi	r22, 0xFC	; 252
    1922:	2f ef       	ldi	r18, 0xFF	; 255
    1924:	72 07       	cpc	r23, r18
    1926:	23 e0       	ldi	r18, 0x03	; 3
    1928:	82 07       	cpc	r24, r18
    192a:	91 05       	cpc	r25, r1
    192c:	58 f4       	brcc	.+22     	; 0x1944 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    192e:	42 e0       	ldi	r20, 0x02	; 2
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	4a 95       	dec	r20
    193a:	d1 f7       	brne	.-12     	; 0x1930 <OsEE_atmega_startTimer1+0x70>
    193c:	61 50       	subi	r22, 0x01	; 1
    193e:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	d6 cf       	rjmp	.-84     	; 0x18f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	20 e1       	ldi	r18, 0x10	; 16
    194a:	82 07       	cpc	r24, r18
    194c:	91 05       	cpc	r25, r1
    194e:	58 f4       	brcc	.+22     	; 0x1966 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    1950:	34 e0       	ldi	r19, 0x04	; 4
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	3a 95       	dec	r19
    195c:	d1 f7       	brne	.-12     	; 0x1952 <OsEE_atmega_startTimer1+0x92>
    195e:	61 50       	subi	r22, 0x01	; 1
    1960:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	c5 cf       	rjmp	.-118    	; 0x18f0 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    1966:	26 e0       	ldi	r18, 0x06	; 6
    1968:	96 95       	lsr	r25
    196a:	87 95       	ror	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	2a 95       	dec	r18
    1972:	d1 f7       	brne	.-12     	; 0x1968 <OsEE_atmega_startTimer1+0xa8>
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    1978:	85 e0       	ldi	r24, 0x05	; 5
    197a:	ba cf       	rjmp	.-140    	; 0x18f0 <OsEE_atmega_startTimer1+0x30>

0000197c <__udivmodsi4>:
    197c:	a1 e2       	ldi	r26, 0x21	; 33
    197e:	1a 2e       	mov	r1, r26
    1980:	aa 1b       	sub	r26, r26
    1982:	bb 1b       	sub	r27, r27
    1984:	fd 01       	movw	r30, r26
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <__udivmodsi4_ep>

00001988 <__udivmodsi4_loop>:
    1988:	aa 1f       	adc	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	ee 1f       	adc	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	a2 17       	cp	r26, r18
    1992:	b3 07       	cpc	r27, r19
    1994:	e4 07       	cpc	r30, r20
    1996:	f5 07       	cpc	r31, r21
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__udivmodsi4_ep>
    199a:	a2 1b       	sub	r26, r18
    199c:	b3 0b       	sbc	r27, r19
    199e:	e4 0b       	sbc	r30, r20
    19a0:	f5 0b       	sbc	r31, r21

000019a2 <__udivmodsi4_ep>:
    19a2:	66 1f       	adc	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	1a 94       	dec	r1
    19ac:	69 f7       	brne	.-38     	; 0x1988 <__udivmodsi4_loop>
    19ae:	60 95       	com	r22
    19b0:	70 95       	com	r23
    19b2:	80 95       	com	r24
    19b4:	90 95       	com	r25
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	bd 01       	movw	r22, r26
    19bc:	cf 01       	movw	r24, r30
    19be:	08 95       	ret

000019c0 <__tablejump2__>:
    19c0:	ee 0f       	add	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	05 90       	lpm	r0, Z+
    19c6:	f4 91       	lpm	r31, Z
    19c8:	e0 2d       	mov	r30, r0
    19ca:	09 94       	ijmp

000019cc <_exit>:
    19cc:	f8 94       	cli

000019ce <__stop_program>:
    19ce:	ff cf       	rjmp	.-2      	; 0x19ce <__stop_program>
