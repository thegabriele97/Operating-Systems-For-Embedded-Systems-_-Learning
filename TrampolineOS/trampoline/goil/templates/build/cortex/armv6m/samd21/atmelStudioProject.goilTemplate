%
#set all paths (add '../..' as atmel studio project is in a subfolder).
let pathList := @()
let pathList += "../../".PROJECT
let pathList += "../../".OS::BUILD_S::TRAMPOLINE_BASE_PATH."/os"
let pathList += "../../".OS::BUILD_S::TRAMPOLINE_BASE_PATH."/com"
let pathList += "../../".OS::BUILD_S::TRAMPOLINE_BASE_PATH."/ioc"
let pathList += "../../".OS::BUILD_S::TRAMPOLINE_BASE_PATH."/debug"
let partialTargetPath := ""
foreach platform in exists PLATFORM_FILES default (@())
do
  let pathList += "../../".OS::BUILD_S::TRAMPOLINE_BASE_PATH."/machines/".platform::PATH
end foreach

#generated files
let generatedFiles := @()
let generatedFiles += "tpl_app_config.c"
if OS::SYSTEM_CALL then
  let generatedFiles += "tpl_dispatch_table.c"
  let generatedFiles += "tpl_invoque.S"
else
  let generatedFiles += "tpl_os.c"
end if
if [TRANSACTION length] > 0 then
  let generatedFiles += "stm_structure.c"
end if
if [IOC length] > 0 then
  let generatedFiles += "tpl_ioc_api_config.c"
end if
foreach platform in exists GENERATED_FILES default (@()) do
  if not exists platform::CFILE then let platform::CFILE := @() end if
  if not exists platform::ASFILE then let platform::ASFILE := @() end if
  foreach file in platform::CFILE do
    let generatedFiles += file::VALUE
  end foreach
  foreach file in platform::ASFILE do
    let generatedFiles += file::VALUE
  end foreach
end foreach


#kernel files.
let KERNEL_MAP := mapof KERNEL by NAME
let FILES := @[]
let FILES["osek_kernel"] := KERNEL_MAP["osek_kernel"]
if USECOM then
  let FILES["com_kernel"] := KERNEL_MAP["com_kernel"]
end if
if OS::SCALABILITYCLASS > 0 then
  let FILES["autosar_kernel"] := KERNEL_MAP["autosar_kernel"]
end if
foreach module in exists OS::KERNEL_MODULE default (@())
do
  if exists KERNEL_MAP[module::VALUE] then
    if module::VALUE != "osek_kernel" &
       module::VALUE != "com_kernel" &
       module::VALUE != "autosar_kernel" then
      let FILES[module::VALUE] := KERNEL_MAP[module::VALUE]
    else
      error module:"Module does not exist"
    end if
  end if
end foreach
foreach service_set in APIUSED do
  let FILES[service_set::NAME]::PATH := service_set::DIRECTORY
  let files := @()
  foreach file in service_set::FILE do
    let files += file::VALUE.".c"
  end foreach
  let FILES[service_set::NAME]::FILE := files
end foreach

#user files
let USER_FILES := @[]
let USER_FILES["c"]   := exists OS::BUILD_S::APP_SRC    default (@())
let USER_FILES["cpp"] := exists OS::BUILD_S::APP_CPPSRC default (@())

#project Folder
let projectFolder := "aStudio_".PROJECT

%<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
  <PropertyGroup>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectVersion>7.0</ProjectVersion>
    <ToolchainName>com.Atmel.ARMGCC.C</ToolchainName>
    <ProjectGuid>dce6c7e3-ee26-4d79-826b-08594b9ad897</ProjectGuid>
    <avrdevice>ATSAMD21J18A</avrdevice>
    <avrdeviceseries>none</avrdeviceseries>
    <OutputType>Executable</OutputType>
    <Language>C</Language>
    <OutputFileName>$(MSBuildProjectName)</OutputFileName>
    <OutputFileExtension>.elf</OutputFileExtension>
    <OutputDirectory>$(MSBuildProjectDirectory)\$(Configuration)</OutputDirectory>
    <AssemblyName>%!PROJECT%</AssemblyName>
    <Name>%!PROJECT%</Name>
    <RootNamespace>%!PROJECT%</RootNamespace>
    <ToolchainFlavour>Native</ToolchainFlavour>
    <KeepTimersRunning>true</KeepTimersRunning>
    <OverrideVtor>false</OverrideVtor>
    <CacheFlash>true</CacheFlash>
    <ProgFlashFromRam>true</ProgFlashFromRam>
    <RamSnippetAddress>0x20000000</RamSnippetAddress>
    <UncachedRange />
    <preserveEEPROM>true</preserveEEPROM>
    <OverrideVtorValue>exception_table</OverrideVtorValue>
    <BootSegment>2</BootSegment>
    <eraseonlaunchrule>0</eraseonlaunchrule>
    <AsfFrameworkConfig>
      <framework-data xmlns="">
        <options />
        <configurations />
        <files />
        <documentation help="" />
        <offline-documentation help="" />
        <dependencies>
          <content-extension eid="atmel.asf" uuidref="Atmel.ASF" version="3.30.1" />
        </dependencies>
      </framework-data>
    </AsfFrameworkConfig>
    <avrtoolinterfaceclock>2000000</avrtoolinterfaceclock>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <ToolchainSettings>
      <ArmGcc>
  <armgcc.common.outputfiles.hex>True</armgcc.common.outputfiles.hex>
  <armgcc.common.outputfiles.lss>True</armgcc.common.outputfiles.lss>
  <armgcc.common.outputfiles.eep>False</armgcc.common.outputfiles.eep>
  <armgcc.common.outputfiles.bin>True</armgcc.common.outputfiles.bin>
  <armgcc.common.outputfiles.srec>False</armgcc.common.outputfiles.srec>
  <armgcc.compiler.symbols.DefSymbols>
    <ListValues>
      <Value>NDEBUG</Value>
    </ListValues>
  </armgcc.compiler.symbols.DefSymbols>
  <armgcc.compiler.optimization.level>Optimize for size (-Os)</armgcc.compiler.optimization.level>
  <armgcc.compiler.optimization.PrepareFunctionsForGarbageCollection>True</armgcc.compiler.optimization.PrepareFunctionsForGarbageCollection>
  <armgcc.compiler.warnings.AllWarnings>True</armgcc.compiler.warnings.AllWarnings>
  <armgcc.linker.libraries.Libraries>
    <ListValues>
      <Value>libm</Value>
    </ListValues>
  </armgcc.linker.libraries.Libraries>
  <armgcc.linker.libraries.LibrarySearchPaths>
    <ListValues>
      <Value>..\..\\%!PROJECT%</Value>
    </ListValues>
  </armgcc.linker.libraries.LibrarySearchPaths>
  <armgcc.linker.optimization.GarbageCollectUnusedSections>True</armgcc.linker.optimization.GarbageCollectUnusedSections>
  <armgcc.linker.miscellaneous.LinkerFlags>-Tscript.ld</armgcc.linker.miscellaneous.LinkerFlags>
  <armgcc.assembler.general.IncludePaths>
    <ListValues>
      <Value>\%24(PackRepoDir)\atmel\SAMD21_DFP\1.0.231\samd21a\include</Value>
      <Value>\%24(PackRepoDir)\arm\cmsis\4.2.0\CMSIS\Include\</Value>
    </ListValues>
  </armgcc.assembler.general.IncludePaths>
  <armgcc.preprocessingassembler.general.IncludePaths>
    <ListValues>
      <Value>\%24(PackRepoDir)\atmel\SAMD21_DFP\1.0.231\samd21a\include</Value>
      <Value>\%24(PackRepoDir)\arm\cmsis\4.2.0\CMSIS\Include\</Value>
    </ListValues>
  </armgcc.preprocessingassembler.general.IncludePaths>
</ArmGcc>
    </ToolchainSettings>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <ToolchainSettings>
      <ArmGcc>
  <armgcc.common.outputfiles.hex>True</armgcc.common.outputfiles.hex>
  <armgcc.common.outputfiles.lss>True</armgcc.common.outputfiles.lss>
  <armgcc.common.outputfiles.eep>False</armgcc.common.outputfiles.eep>
  <armgcc.common.outputfiles.bin>False</armgcc.common.outputfiles.bin>
  <armgcc.common.outputfiles.srec>False</armgcc.common.outputfiles.srec>
  <armgcc.compiler.directories.IncludePaths>
    <ListValues>
%foreach path in pathList do
  %      <Value>%!path%</Value>%
between %\n%
end foreach%
    </ListValues>
  </armgcc.compiler.directories.IncludePaths>
  <armgcc.compiler.optimization.PrepareFunctionsForGarbageCollection>True</armgcc.compiler.optimization.PrepareFunctionsForGarbageCollection>
  <armgcc.compiler.optimization.PrepareDataForGarbageCollection>True</armgcc.compiler.optimization.PrepareDataForGarbageCollection>
  <armgcc.compiler.optimization.DebugLevel>Maximum (-g3)</armgcc.compiler.optimization.DebugLevel>
  <armgcc.compiler.warnings.AllWarnings>True</armgcc.compiler.warnings.AllWarnings>
  <armgcc.compiler.miscellaneous.OtherFlags>-std=gnu99 -Wno-unused-but-set-variable -Wmissing-field-initializers -fno-exceptions -mcpu=cortex-m0plus</armgcc.compiler.miscellaneous.OtherFlags>
  <armgcc.linker.general.DoNotUseStandardStartFiles>True</armgcc.linker.general.DoNotUseStandardStartFiles>
  <armgcc.linker.general.NoStartupOrDefaultLibs>True</armgcc.linker.general.NoStartupOrDefaultLibs>
  <armgcc.linker.general.AdditionalSpecs>Use syscall stubs (--specs=nosys.specs)</armgcc.linker.general.AdditionalSpecs>
  <armgcc.linker.libraries.Libraries>
    <ListValues>
      <Value>libm</Value>
    </ListValues>
  </armgcc.linker.libraries.Libraries>
  <armgcc.linker.libraries.LibrarySearchPaths>
    <ListValues>
      <Value>\%24(ProjectDir)\Device_Startup</Value>
    </ListValues>
  </armgcc.linker.libraries.LibrarySearchPaths>
  <armgcc.linker.memorysettings.ExternalRAM />
  <armgcc.linker.miscellaneous.LinkerFlags>-T../../%!PROJECT%/script.ld</armgcc.linker.miscellaneous.LinkerFlags>
  <armgcc.assembler.general.IncludePaths>
    <ListValues>
%foreach path in pathList do
  %      <Value>%!path%</Value>%
between %\n%
end foreach%
    </ListValues>
  </armgcc.assembler.general.IncludePaths>
  <armgcc.assembler.debugging.DebugLevel>Default (-g)</armgcc.assembler.debugging.DebugLevel>
  <armgcc.preprocessingassembler.general.IncludePaths>
    <ListValues>
%foreach path in pathList do
  %      <Value>%!path%</Value>%
between %\n%
end foreach%
    </ListValues>
  </armgcc.preprocessingassembler.general.IncludePaths>
  <armgcc.preprocessingassembler.debugging.DebugLevel>Default (-Wa,-g)</armgcc.preprocessingassembler.debugging.DebugLevel>
</ArmGcc>
    </ToolchainSettings>
  </PropertyGroup>
  <ItemGroup>
%foreach file in generatedFiles do
%    <Compile Include="../%!PROJECT%/%!file%">
      <SubType>compile</SubType>
      <Link>trampoline/generated/%!file%</Link>
    </Compile>
%
end foreach
foreach module in FILES do
  foreach f in module::FILE do
    if exists f::VALUE then #old goilv2 approach with ::VALUE
%    <Compile Include="../%!OS::BUILD_S::TRAMPOLINE_BASE_PATH%/%!module::PATH%/%!f::VALUE%">
      <SubType>compile</SubType>
      <Link>trampoline/%!module::PATH%/%!f::VALUE%</Link>
    </Compile>
%
    else #updated files.
%    <Compile Include="../%!OS::BUILD_S::TRAMPOLINE_BASE_PATH%/%!module::PATH%/%!f%">
      <SubType>compile</SubType>
      <Link>trampoline/%!module::PATH%/%!f%</Link>
    </Compile>
%
    end if
  end foreach
end foreach

#machine files
foreach platform in exists PLATFORM_FILES default (@()) do
  foreach file in exists platform::CFILE default (@()) do
%    <Compile Include="../%!OS::BUILD_S::TRAMPOLINE_BASE_PATH%/machines/%!platform::PATH%/%!file::VALUE%">
      <SubType>compile</SubType>
      <Link>trampoline/machines/%!file::VALUE%</Link>
    </Compile>
%
  end foreach
end foreach

#application files
foreach file in exists OS::BUILD_S::APP_SRC default (@()) do
%    <Compile Include="../%!file::VALUE%">
      <SubType>compile</SubType>
      <Link>%!file::VALUE%</Link>
    </Compile>
%
end foreach%
    <None Include="../%!PROJECT%.oil">
      <SubType>compile</SubType>
      <Link>%!PROJECT%.oil</Link>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="trampoline" />
    <Folder Include="trampoline\os" />
    <Folder Include="trampoline\generated" />
    <Folder Include="trampoline\machines" />
  </ItemGroup>
  <Import Project="$(AVRSTUDIO_EXE_PATH)\\Vs\\Compiler.targets" />
</Project>
